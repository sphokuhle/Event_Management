#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EventrixWCF
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="EventrixDB")]
	public partial class EventrixDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGuest(Guest instance);
    partial void UpdateGuest(Guest instance);
    partial void DeleteGuest(Guest instance);
    partial void InsertDATE(DATE instance);
    partial void UpdateDATE(DATE instance);
    partial void DeleteDATE(DATE instance);
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertEventHost(EventHost instance);
    partial void UpdateEventHost(EventHost instance);
    partial void DeleteEventHost(EventHost instance);
    partial void InsertEventView(EventView instance);
    partial void UpdateEventView(EventView instance);
    partial void DeleteEventView(EventView instance);
    partial void InsertMAIN_EVENT(MAIN_EVENT instance);
    partial void UpdateMAIN_EVENT(MAIN_EVENT instance);
    partial void DeleteMAIN_EVENT(MAIN_EVENT instance);
    partial void InsertSURVEY(SURVEY instance);
    partial void UpdateSURVEY(SURVEY instance);
    partial void DeleteSURVEY(SURVEY instance);
    partial void InsertTicket_Template(Ticket_Template instance);
    partial void UpdateTicket_Template(Ticket_Template instance);
    partial void DeleteTicket_Template(Ticket_Template instance);
    partial void InsertStaff(Staff instance);
    partial void UpdateStaff(Staff instance);
    partial void DeleteStaff(Staff instance);
    partial void InsertSPEAKER(SPEAKER instance);
    partial void UpdateSPEAKER(SPEAKER instance);
    partial void DeleteSPEAKER(SPEAKER instance);
    partial void InsertSESSION(SESSION instance);
    partial void UpdateSESSION(SESSION instance);
    partial void DeleteSESSION(SESSION instance);
    partial void InsertRECOMMENDATION(RECOMMENDATION instance);
    partial void UpdateRECOMMENDATION(RECOMMENDATION instance);
    partial void DeleteRECOMMENDATION(RECOMMENDATION instance);
    partial void InsertVENDOR(VENDOR instance);
    partial void UpdateVENDOR(VENDOR instance);
    partial void DeleteVENDOR(VENDOR instance);
    partial void InsertUserImage(UserImage instance);
    partial void UpdateUserImage(UserImage instance);
    partial void DeleteUserImage(UserImage instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertOVERALL_SATISFACTION(OVERALL_SATISFACTION instance);
    partial void UpdateOVERALL_SATISFACTION(OVERALL_SATISFACTION instance);
    partial void DeleteOVERALL_SATISFACTION(OVERALL_SATISFACTION instance);
    partial void InsertLONG_QUESTION(LONG_QUESTION instance);
    partial void UpdateLONG_QUESTION(LONG_QUESTION instance);
    partial void DeleteLONG_QUESTION(LONG_QUESTION instance);
    partial void InsertLOCATION(LOCATION instance);
    partial void UpdateLOCATION(LOCATION instance);
    partial void DeleteLOCATION(LOCATION instance);
    partial void InsertGuest_Ticket(Guest_Ticket instance);
    partial void UpdateGuest_Ticket(Guest_Ticket instance);
    partial void DeleteGuest_Ticket(Guest_Ticket instance);
    partial void InsertGuest_QRCode(Guest_QRCode instance);
    partial void UpdateGuest_QRCode(Guest_QRCode instance);
    partial void DeleteGuest_QRCode(Guest_QRCode instance);
    partial void InsertFUTURE_ATTENDANCE(FUTURE_ATTENDANCE instance);
    partial void UpdateFUTURE_ATTENDANCE(FUTURE_ATTENDANCE instance);
    partial void DeleteFUTURE_ATTENDANCE(FUTURE_ATTENDANCE instance);
    partial void InsertFOOD(FOOD instance);
    partial void UpdateFOOD(FOOD instance);
    partial void DeleteFOOD(FOOD instance);
    partial void InsertFIRST_TIME(FIRST_TIME instance);
    partial void UpdateFIRST_TIME(FIRST_TIME instance);
    partial void DeleteFIRST_TIME(FIRST_TIME instance);
    partial void InsertEventRSVP(EventRSVP instance);
    partial void UpdateEventRSVP(EventRSVP instance);
    partial void DeleteEventRSVP(EventRSVP instance);
    partial void InsertEventImage(EventImage instance);
    partial void UpdateEventImage(EventImage instance);
    partial void DeleteEventImage(EventImage instance);
    partial void InsertGuestImage(GuestImage instance);
    partial void UpdateGuestImage(GuestImage instance);
    partial void DeleteGuestImage(GuestImage instance);
    #endregion
		
		public EventrixDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["EventrixDBConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public EventrixDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EventrixDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EventrixDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EventrixDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Guest> Guests
		{
			get
			{
				return this.GetTable<Guest>();
			}
		}
		
		public System.Data.Linq.Table<DATE> DATEs
		{
			get
			{
				return this.GetTable<DATE>();
			}
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<EventHost> EventHosts
		{
			get
			{
				return this.GetTable<EventHost>();
			}
		}
		
		public System.Data.Linq.Table<EventView> EventViews
		{
			get
			{
				return this.GetTable<EventView>();
			}
		}
		
		public System.Data.Linq.Table<MAIN_EVENT> MAIN_EVENTs
		{
			get
			{
				return this.GetTable<MAIN_EVENT>();
			}
		}
		
		public System.Data.Linq.Table<SURVEY> SURVEYs
		{
			get
			{
				return this.GetTable<SURVEY>();
			}
		}
		
		public System.Data.Linq.Table<Ticket_Template> Ticket_Templates
		{
			get
			{
				return this.GetTable<Ticket_Template>();
			}
		}
		
		public System.Data.Linq.Table<Staff> Staffs
		{
			get
			{
				return this.GetTable<Staff>();
			}
		}
		
		public System.Data.Linq.Table<SPEAKER> SPEAKERs
		{
			get
			{
				return this.GetTable<SPEAKER>();
			}
		}
		
		public System.Data.Linq.Table<SESSION> SESSIONs
		{
			get
			{
				return this.GetTable<SESSION>();
			}
		}
		
		public System.Data.Linq.Table<RECOMMENDATION> RECOMMENDATIONs
		{
			get
			{
				return this.GetTable<RECOMMENDATION>();
			}
		}
		
		public System.Data.Linq.Table<VENDOR> VENDORs
		{
			get
			{
				return this.GetTable<VENDOR>();
			}
		}
		
		public System.Data.Linq.Table<UserImage> UserImages
		{
			get
			{
				return this.GetTable<UserImage>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<OVERALL_SATISFACTION> OVERALL_SATISFACTIONs
		{
			get
			{
				return this.GetTable<OVERALL_SATISFACTION>();
			}
		}
		
		public System.Data.Linq.Table<LONG_QUESTION> LONG_QUESTIONs
		{
			get
			{
				return this.GetTable<LONG_QUESTION>();
			}
		}
		
		public System.Data.Linq.Table<LOCATION> LOCATIONs
		{
			get
			{
				return this.GetTable<LOCATION>();
			}
		}
		
		public System.Data.Linq.Table<Guest_Ticket> Guest_Tickets
		{
			get
			{
				return this.GetTable<Guest_Ticket>();
			}
		}
		
		public System.Data.Linq.Table<Guest_QRCode> Guest_QRCodes
		{
			get
			{
				return this.GetTable<Guest_QRCode>();
			}
		}
		
		public System.Data.Linq.Table<FUTURE_ATTENDANCE> FUTURE_ATTENDANCEs
		{
			get
			{
				return this.GetTable<FUTURE_ATTENDANCE>();
			}
		}
		
		public System.Data.Linq.Table<FOOD> FOODs
		{
			get
			{
				return this.GetTable<FOOD>();
			}
		}
		
		public System.Data.Linq.Table<FIRST_TIME> FIRST_TIMEs
		{
			get
			{
				return this.GetTable<FIRST_TIME>();
			}
		}
		
		public System.Data.Linq.Table<EventRSVP> EventRSVPs
		{
			get
			{
				return this.GetTable<EventRSVP>();
			}
		}
		
		public System.Data.Linq.Table<EventImage> EventImages
		{
			get
			{
				return this.GetTable<EventImage>();
			}
		}
		
		public System.Data.Linq.Table<GuestImage> GuestImages
		{
			get
			{
				return this.GetTable<GuestImage>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Guest")]
	public partial class Guest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _G_ID;
		
		private string _Name;
		
		private string _Surname;
		
		private string _Email;
		
		private string _Password;
		
		private string _Type;
		
		private EntitySet<EventView> _EventViews;
		
		private EntitySet<Guest_Ticket> _Guest_Tickets;
		
		private EntitySet<EventRSVP> _EventRSVPs;
		
		private EntitySet<GuestImage> _GuestImages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnG_IDChanging(int value);
    partial void OnG_IDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public Guest()
		{
			this._EventViews = new EntitySet<EventView>(new Action<EventView>(this.attach_EventViews), new Action<EventView>(this.detach_EventViews));
			this._Guest_Tickets = new EntitySet<Guest_Ticket>(new Action<Guest_Ticket>(this.attach_Guest_Tickets), new Action<Guest_Ticket>(this.detach_Guest_Tickets));
			this._EventRSVPs = new EntitySet<EventRSVP>(new Action<EventRSVP>(this.attach_EventRSVPs), new Action<EventRSVP>(this.detach_EventRSVPs));
			this._GuestImages = new EntitySet<GuestImage>(new Action<GuestImage>(this.attach_GuestImages), new Action<GuestImage>(this.detach_GuestImages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_G_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int G_ID
		{
			get
			{
				return this._G_ID;
			}
			set
			{
				if ((this._G_ID != value))
				{
					this.OnG_IDChanging(value);
					this.SendPropertyChanging();
					this._G_ID = value;
					this.SendPropertyChanged("G_ID");
					this.OnG_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="VarChar(MAX)")]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(MAX)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(MAX)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(10)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Guest_EventView", Storage="_EventViews", ThisKey="G_ID", OtherKey="G_ID")]
		public EntitySet<EventView> EventViews
		{
			get
			{
				return this._EventViews;
			}
			set
			{
				this._EventViews.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Guest_Guest_Ticket", Storage="_Guest_Tickets", ThisKey="G_ID", OtherKey="G_ID")]
		public EntitySet<Guest_Ticket> Guest_Tickets
		{
			get
			{
				return this._Guest_Tickets;
			}
			set
			{
				this._Guest_Tickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Guest_EventRSVP", Storage="_EventRSVPs", ThisKey="G_ID", OtherKey="G_ID")]
		public EntitySet<EventRSVP> EventRSVPs
		{
			get
			{
				return this._EventRSVPs;
			}
			set
			{
				this._EventRSVPs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Guest_GuestImage", Storage="_GuestImages", ThisKey="G_ID", OtherKey="G_ID")]
		public EntitySet<GuestImage> GuestImages
		{
			get
			{
				return this._GuestImages;
			}
			set
			{
				this._GuestImages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EventViews(EventView entity)
		{
			this.SendPropertyChanging();
			entity.Guest = this;
		}
		
		private void detach_EventViews(EventView entity)
		{
			this.SendPropertyChanging();
			entity.Guest = null;
		}
		
		private void attach_Guest_Tickets(Guest_Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Guest = this;
		}
		
		private void detach_Guest_Tickets(Guest_Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Guest = null;
		}
		
		private void attach_EventRSVPs(EventRSVP entity)
		{
			this.SendPropertyChanging();
			entity.Guest = this;
		}
		
		private void detach_EventRSVPs(EventRSVP entity)
		{
			this.SendPropertyChanging();
			entity.Guest = null;
		}
		
		private void attach_GuestImages(GuestImage entity)
		{
			this.SendPropertyChanging();
			entity.Guest = this;
		}
		
		private void detach_GuestImages(GuestImage entity)
		{
			this.SendPropertyChanging();
			entity.Guest = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DATE")]
	public partial class DATE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Very_Dissatisfied;
		
		private System.Nullable<int> _Dissatisfied;
		
		private System.Nullable<int> _Neutral;
		
		private System.Nullable<int> _Satisfied;
		
		private System.Nullable<int> _Very_Satisfied;
		
		private System.Nullable<int> _S_Id;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnVery_DissatisfiedChanging(System.Nullable<int> value);
    partial void OnVery_DissatisfiedChanged();
    partial void OnDissatisfiedChanging(System.Nullable<int> value);
    partial void OnDissatisfiedChanged();
    partial void OnNeutralChanging(System.Nullable<int> value);
    partial void OnNeutralChanged();
    partial void OnSatisfiedChanging(System.Nullable<int> value);
    partial void OnSatisfiedChanged();
    partial void OnVery_SatisfiedChanging(System.Nullable<int> value);
    partial void OnVery_SatisfiedChanged();
    partial void OnS_IdChanging(System.Nullable<int> value);
    partial void OnS_IdChanged();
    #endregion
		
		public DATE()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Very_Dissatisfied", DbType="Int")]
		public System.Nullable<int> Very_Dissatisfied
		{
			get
			{
				return this._Very_Dissatisfied;
			}
			set
			{
				if ((this._Very_Dissatisfied != value))
				{
					this.OnVery_DissatisfiedChanging(value);
					this.SendPropertyChanging();
					this._Very_Dissatisfied = value;
					this.SendPropertyChanged("Very_Dissatisfied");
					this.OnVery_DissatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dissatisfied", DbType="Int")]
		public System.Nullable<int> Dissatisfied
		{
			get
			{
				return this._Dissatisfied;
			}
			set
			{
				if ((this._Dissatisfied != value))
				{
					this.OnDissatisfiedChanging(value);
					this.SendPropertyChanging();
					this._Dissatisfied = value;
					this.SendPropertyChanged("Dissatisfied");
					this.OnDissatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Neutral", DbType="Int")]
		public System.Nullable<int> Neutral
		{
			get
			{
				return this._Neutral;
			}
			set
			{
				if ((this._Neutral != value))
				{
					this.OnNeutralChanging(value);
					this.SendPropertyChanging();
					this._Neutral = value;
					this.SendPropertyChanged("Neutral");
					this.OnNeutralChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Satisfied", DbType="Int")]
		public System.Nullable<int> Satisfied
		{
			get
			{
				return this._Satisfied;
			}
			set
			{
				if ((this._Satisfied != value))
				{
					this.OnSatisfiedChanging(value);
					this.SendPropertyChanging();
					this._Satisfied = value;
					this.SendPropertyChanged("Satisfied");
					this.OnSatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Very_Satisfied", DbType="Int")]
		public System.Nullable<int> Very_Satisfied
		{
			get
			{
				return this._Very_Satisfied;
			}
			set
			{
				if ((this._Very_Satisfied != value))
				{
					this.OnVery_SatisfiedChanging(value);
					this.SendPropertyChanging();
					this._Very_Satisfied = value;
					this.SendPropertyChanged("Very_Satisfied");
					this.OnVery_SatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_Id", DbType="Int")]
		public System.Nullable<int> S_Id
		{
			get
			{
				return this._S_Id;
			}
			set
			{
				if ((this._S_Id != value))
				{
					this.OnS_IdChanging(value);
					this.SendPropertyChanging();
					this._S_Id = value;
					this.SendPropertyChanged("S_Id");
					this.OnS_IdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AD_Id;
		
		private string _AD_StreetName;
		
		private string _AD_City;
		
		private string _AD_Province;
		
		private string _AD_Country;
		
		private string _AD_Longitude;
		
		private string _AD_Latitude;
		
		private EntitySet<MAIN_EVENT> _MAIN_EVENTs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAD_IdChanging(int value);
    partial void OnAD_IdChanged();
    partial void OnAD_StreetNameChanging(string value);
    partial void OnAD_StreetNameChanged();
    partial void OnAD_CityChanging(string value);
    partial void OnAD_CityChanged();
    partial void OnAD_ProvinceChanging(string value);
    partial void OnAD_ProvinceChanged();
    partial void OnAD_CountryChanging(string value);
    partial void OnAD_CountryChanged();
    partial void OnAD_LongitudeChanging(string value);
    partial void OnAD_LongitudeChanged();
    partial void OnAD_LatitudeChanging(string value);
    partial void OnAD_LatitudeChanged();
    #endregion
		
		public Address()
		{
			this._MAIN_EVENTs = new EntitySet<MAIN_EVENT>(new Action<MAIN_EVENT>(this.attach_MAIN_EVENTs), new Action<MAIN_EVENT>(this.detach_MAIN_EVENTs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AD_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AD_Id
		{
			get
			{
				return this._AD_Id;
			}
			set
			{
				if ((this._AD_Id != value))
				{
					this.OnAD_IdChanging(value);
					this.SendPropertyChanging();
					this._AD_Id = value;
					this.SendPropertyChanged("AD_Id");
					this.OnAD_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AD_StreetName", DbType="VarChar(MAX)")]
		public string AD_StreetName
		{
			get
			{
				return this._AD_StreetName;
			}
			set
			{
				if ((this._AD_StreetName != value))
				{
					this.OnAD_StreetNameChanging(value);
					this.SendPropertyChanging();
					this._AD_StreetName = value;
					this.SendPropertyChanged("AD_StreetName");
					this.OnAD_StreetNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AD_City", DbType="VarChar(MAX)")]
		public string AD_City
		{
			get
			{
				return this._AD_City;
			}
			set
			{
				if ((this._AD_City != value))
				{
					this.OnAD_CityChanging(value);
					this.SendPropertyChanging();
					this._AD_City = value;
					this.SendPropertyChanged("AD_City");
					this.OnAD_CityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AD_Province", DbType="VarChar(MAX)")]
		public string AD_Province
		{
			get
			{
				return this._AD_Province;
			}
			set
			{
				if ((this._AD_Province != value))
				{
					this.OnAD_ProvinceChanging(value);
					this.SendPropertyChanging();
					this._AD_Province = value;
					this.SendPropertyChanged("AD_Province");
					this.OnAD_ProvinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AD_Country", DbType="VarChar(MAX)")]
		public string AD_Country
		{
			get
			{
				return this._AD_Country;
			}
			set
			{
				if ((this._AD_Country != value))
				{
					this.OnAD_CountryChanging(value);
					this.SendPropertyChanging();
					this._AD_Country = value;
					this.SendPropertyChanged("AD_Country");
					this.OnAD_CountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AD_Longitude", DbType="VarChar(MAX)")]
		public string AD_Longitude
		{
			get
			{
				return this._AD_Longitude;
			}
			set
			{
				if ((this._AD_Longitude != value))
				{
					this.OnAD_LongitudeChanging(value);
					this.SendPropertyChanging();
					this._AD_Longitude = value;
					this.SendPropertyChanged("AD_Longitude");
					this.OnAD_LongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AD_Latitude", DbType="VarChar(MAX)")]
		public string AD_Latitude
		{
			get
			{
				return this._AD_Latitude;
			}
			set
			{
				if ((this._AD_Latitude != value))
				{
					this.OnAD_LatitudeChanging(value);
					this.SendPropertyChanging();
					this._AD_Latitude = value;
					this.SendPropertyChanged("AD_Latitude");
					this.OnAD_LatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_MAIN_EVENT", Storage="_MAIN_EVENTs", ThisKey="AD_Id", OtherKey="AD_Id")]
		public EntitySet<MAIN_EVENT> MAIN_EVENTs
		{
			get
			{
				return this._MAIN_EVENTs;
			}
			set
			{
				this._MAIN_EVENTs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MAIN_EVENTs(MAIN_EVENT entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_MAIN_EVENTs(MAIN_EVENT entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventHost")]
	public partial class EventHost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EH_ID;
		
		private string _Name;
		
		private string _Surname;
		
		private string _Email;
		
		private string _Password;
		
		private EntitySet<EventView> _EventViews;
		
		private EntitySet<MAIN_EVENT> _MAIN_EVENTs;
		
		private EntitySet<UserImage> _UserImages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEH_IDChanging(int value);
    partial void OnEH_IDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public EventHost()
		{
			this._EventViews = new EntitySet<EventView>(new Action<EventView>(this.attach_EventViews), new Action<EventView>(this.detach_EventViews));
			this._MAIN_EVENTs = new EntitySet<MAIN_EVENT>(new Action<MAIN_EVENT>(this.attach_MAIN_EVENTs), new Action<MAIN_EVENT>(this.detach_MAIN_EVENTs));
			this._UserImages = new EntitySet<UserImage>(new Action<UserImage>(this.attach_UserImages), new Action<UserImage>(this.detach_UserImages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EH_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EH_ID
		{
			get
			{
				return this._EH_ID;
			}
			set
			{
				if ((this._EH_ID != value))
				{
					this.OnEH_IDChanging(value);
					this.SendPropertyChanging();
					this._EH_ID = value;
					this.SendPropertyChanged("EH_ID");
					this.OnEH_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="VarChar(MAX)")]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(MAX)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(MAX)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventHost_EventView", Storage="_EventViews", ThisKey="EH_ID", OtherKey="EH_ID")]
		public EntitySet<EventView> EventViews
		{
			get
			{
				return this._EventViews;
			}
			set
			{
				this._EventViews.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventHost_MAIN_EVENT", Storage="_MAIN_EVENTs", ThisKey="EH_ID", OtherKey="EH_ID")]
		public EntitySet<MAIN_EVENT> MAIN_EVENTs
		{
			get
			{
				return this._MAIN_EVENTs;
			}
			set
			{
				this._MAIN_EVENTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventHost_UserImage", Storage="_UserImages", ThisKey="EH_ID", OtherKey="EH_ID")]
		public EntitySet<UserImage> UserImages
		{
			get
			{
				return this._UserImages;
			}
			set
			{
				this._UserImages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EventViews(EventView entity)
		{
			this.SendPropertyChanging();
			entity.EventHost = this;
		}
		
		private void detach_EventViews(EventView entity)
		{
			this.SendPropertyChanging();
			entity.EventHost = null;
		}
		
		private void attach_MAIN_EVENTs(MAIN_EVENT entity)
		{
			this.SendPropertyChanging();
			entity.EventHost = this;
		}
		
		private void detach_MAIN_EVENTs(MAIN_EVENT entity)
		{
			this.SendPropertyChanging();
			entity.EventHost = null;
		}
		
		private void attach_UserImages(UserImage entity)
		{
			this.SendPropertyChanging();
			entity.EventHost = this;
		}
		
		private void detach_UserImages(UserImage entity)
		{
			this.SendPropertyChanging();
			entity.EventHost = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventView")]
	public partial class EventView : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Promo_Id;
		
		private int _eventID;
		
		private System.Nullable<int> _G_ID;
		
		private System.Nullable<int> _EH_ID;
		
		private System.Nullable<System.DateTime> _ViewDate;
		
		private string _Type;
		
		private EntityRef<EventHost> _EventHost;
		
		private EntityRef<Guest> _Guest;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPromo_IdChanging(int value);
    partial void OnPromo_IdChanged();
    partial void OneventIDChanging(int value);
    partial void OneventIDChanged();
    partial void OnG_IDChanging(System.Nullable<int> value);
    partial void OnG_IDChanged();
    partial void OnEH_IDChanging(System.Nullable<int> value);
    partial void OnEH_IDChanged();
    partial void OnViewDateChanging(System.Nullable<System.DateTime> value);
    partial void OnViewDateChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public EventView()
		{
			this._EventHost = default(EntityRef<EventHost>);
			this._Guest = default(EntityRef<Guest>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Promo_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Promo_Id
		{
			get
			{
				return this._Promo_Id;
			}
			set
			{
				if ((this._Promo_Id != value))
				{
					this.OnPromo_IdChanging(value);
					this.SendPropertyChanging();
					this._Promo_Id = value;
					this.SendPropertyChanged("Promo_Id");
					this.OnPromo_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eventID", DbType="Int NOT NULL")]
		public int eventID
		{
			get
			{
				return this._eventID;
			}
			set
			{
				if ((this._eventID != value))
				{
					this.OneventIDChanging(value);
					this.SendPropertyChanging();
					this._eventID = value;
					this.SendPropertyChanged("eventID");
					this.OneventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_G_ID", DbType="Int")]
		public System.Nullable<int> G_ID
		{
			get
			{
				return this._G_ID;
			}
			set
			{
				if ((this._G_ID != value))
				{
					if (this._Guest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnG_IDChanging(value);
					this.SendPropertyChanging();
					this._G_ID = value;
					this.SendPropertyChanged("G_ID");
					this.OnG_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EH_ID", DbType="Int")]
		public System.Nullable<int> EH_ID
		{
			get
			{
				return this._EH_ID;
			}
			set
			{
				if ((this._EH_ID != value))
				{
					if (this._EventHost.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEH_IDChanging(value);
					this.SendPropertyChanging();
					this._EH_ID = value;
					this.SendPropertyChanged("EH_ID");
					this.OnEH_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViewDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ViewDate
		{
			get
			{
				return this._ViewDate;
			}
			set
			{
				if ((this._ViewDate != value))
				{
					this.OnViewDateChanging(value);
					this.SendPropertyChanging();
					this._ViewDate = value;
					this.SendPropertyChanged("ViewDate");
					this.OnViewDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(10)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventHost_EventView", Storage="_EventHost", ThisKey="EH_ID", OtherKey="EH_ID", IsForeignKey=true)]
		public EventHost EventHost
		{
			get
			{
				return this._EventHost.Entity;
			}
			set
			{
				EventHost previousValue = this._EventHost.Entity;
				if (((previousValue != value) 
							|| (this._EventHost.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventHost.Entity = null;
						previousValue.EventViews.Remove(this);
					}
					this._EventHost.Entity = value;
					if ((value != null))
					{
						value.EventViews.Add(this);
						this._EH_ID = value.EH_ID;
					}
					else
					{
						this._EH_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("EventHost");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Guest_EventView", Storage="_Guest", ThisKey="G_ID", OtherKey="G_ID", IsForeignKey=true)]
		public Guest Guest
		{
			get
			{
				return this._Guest.Entity;
			}
			set
			{
				Guest previousValue = this._Guest.Entity;
				if (((previousValue != value) 
							|| (this._Guest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Guest.Entity = null;
						previousValue.EventViews.Remove(this);
					}
					this._Guest.Entity = value;
					if ((value != null))
					{
						value.EventViews.Add(this);
						this._G_ID = value.G_ID;
					}
					else
					{
						this._G_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Guest");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MAIN_EVENT")]
	public partial class MAIN_EVENT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _E_ID;
		
		private System.Nullable<int> _EH_ID;
		
		private int _AD_Id;
		
		private string _E_Name;
		
		private string _E_Desc;
		
		private string _E_Type;
		
		private System.Nullable<int> _E_EB_Ticket;
		
		private System.Nullable<int> _E_RG_Ticket;
		
		private System.Nullable<int> _E_VIP_Ticket;
		
		private System.Nullable<int> _E_VVIP_Ticket;
		
		private System.Nullable<System.DateTime> _E_StartDate;
		
		private System.Nullable<System.DateTime> _E_EndDate;
		
		private System.Nullable<int> _E_NumProduct;
		
		private System.Nullable<int> _NumViews;
		
		private string _Category;
		
		private string _EventStatus;
		
		private EntitySet<SURVEY> _SURVEYs;
		
		private EntitySet<Ticket_Template> _Ticket_Templates;
		
		private EntitySet<Staff> _Staffs;
		
		private EntitySet<Product> _Products;
		
		private EntitySet<EventRSVP> _EventRSVPs;
		
		private EntitySet<EventImage> _EventImages;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<EventHost> _EventHost;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnE_IDChanging(int value);
    partial void OnE_IDChanged();
    partial void OnEH_IDChanging(System.Nullable<int> value);
    partial void OnEH_IDChanged();
    partial void OnAD_IdChanging(int value);
    partial void OnAD_IdChanged();
    partial void OnE_NameChanging(string value);
    partial void OnE_NameChanged();
    partial void OnE_DescChanging(string value);
    partial void OnE_DescChanged();
    partial void OnE_TypeChanging(string value);
    partial void OnE_TypeChanged();
    partial void OnE_EB_TicketChanging(System.Nullable<int> value);
    partial void OnE_EB_TicketChanged();
    partial void OnE_RG_TicketChanging(System.Nullable<int> value);
    partial void OnE_RG_TicketChanged();
    partial void OnE_VIP_TicketChanging(System.Nullable<int> value);
    partial void OnE_VIP_TicketChanged();
    partial void OnE_VVIP_TicketChanging(System.Nullable<int> value);
    partial void OnE_VVIP_TicketChanged();
    partial void OnE_StartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnE_StartDateChanged();
    partial void OnE_EndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnE_EndDateChanged();
    partial void OnE_NumProductChanging(System.Nullable<int> value);
    partial void OnE_NumProductChanged();
    partial void OnNumViewsChanging(System.Nullable<int> value);
    partial void OnNumViewsChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnEventStatusChanging(string value);
    partial void OnEventStatusChanged();
    #endregion
		
		public MAIN_EVENT()
		{
			this._SURVEYs = new EntitySet<SURVEY>(new Action<SURVEY>(this.attach_SURVEYs), new Action<SURVEY>(this.detach_SURVEYs));
			this._Ticket_Templates = new EntitySet<Ticket_Template>(new Action<Ticket_Template>(this.attach_Ticket_Templates), new Action<Ticket_Template>(this.detach_Ticket_Templates));
			this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			this._EventRSVPs = new EntitySet<EventRSVP>(new Action<EventRSVP>(this.attach_EventRSVPs), new Action<EventRSVP>(this.detach_EventRSVPs));
			this._EventImages = new EntitySet<EventImage>(new Action<EventImage>(this.attach_EventImages), new Action<EventImage>(this.detach_EventImages));
			this._Address = default(EntityRef<Address>);
			this._EventHost = default(EntityRef<EventHost>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int E_ID
		{
			get
			{
				return this._E_ID;
			}
			set
			{
				if ((this._E_ID != value))
				{
					this.OnE_IDChanging(value);
					this.SendPropertyChanging();
					this._E_ID = value;
					this.SendPropertyChanged("E_ID");
					this.OnE_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EH_ID", DbType="Int")]
		public System.Nullable<int> EH_ID
		{
			get
			{
				return this._EH_ID;
			}
			set
			{
				if ((this._EH_ID != value))
				{
					if (this._EventHost.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEH_IDChanging(value);
					this.SendPropertyChanging();
					this._EH_ID = value;
					this.SendPropertyChanged("EH_ID");
					this.OnEH_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AD_Id", DbType="Int NOT NULL")]
		public int AD_Id
		{
			get
			{
				return this._AD_Id;
			}
			set
			{
				if ((this._AD_Id != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAD_IdChanging(value);
					this.SendPropertyChanging();
					this._AD_Id = value;
					this.SendPropertyChanged("AD_Id");
					this.OnAD_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string E_Name
		{
			get
			{
				return this._E_Name;
			}
			set
			{
				if ((this._E_Name != value))
				{
					this.OnE_NameChanging(value);
					this.SendPropertyChanging();
					this._E_Name = value;
					this.SendPropertyChanged("E_Name");
					this.OnE_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_Desc", DbType="VarChar(MAX)")]
		public string E_Desc
		{
			get
			{
				return this._E_Desc;
			}
			set
			{
				if ((this._E_Desc != value))
				{
					this.OnE_DescChanging(value);
					this.SendPropertyChanging();
					this._E_Desc = value;
					this.SendPropertyChanged("E_Desc");
					this.OnE_DescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_Type", DbType="VarChar(MAX)")]
		public string E_Type
		{
			get
			{
				return this._E_Type;
			}
			set
			{
				if ((this._E_Type != value))
				{
					this.OnE_TypeChanging(value);
					this.SendPropertyChanging();
					this._E_Type = value;
					this.SendPropertyChanged("E_Type");
					this.OnE_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_EB_Ticket", DbType="Int")]
		public System.Nullable<int> E_EB_Ticket
		{
			get
			{
				return this._E_EB_Ticket;
			}
			set
			{
				if ((this._E_EB_Ticket != value))
				{
					this.OnE_EB_TicketChanging(value);
					this.SendPropertyChanging();
					this._E_EB_Ticket = value;
					this.SendPropertyChanged("E_EB_Ticket");
					this.OnE_EB_TicketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_RG_Ticket", DbType="Int")]
		public System.Nullable<int> E_RG_Ticket
		{
			get
			{
				return this._E_RG_Ticket;
			}
			set
			{
				if ((this._E_RG_Ticket != value))
				{
					this.OnE_RG_TicketChanging(value);
					this.SendPropertyChanging();
					this._E_RG_Ticket = value;
					this.SendPropertyChanged("E_RG_Ticket");
					this.OnE_RG_TicketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_VIP_Ticket", DbType="Int")]
		public System.Nullable<int> E_VIP_Ticket
		{
			get
			{
				return this._E_VIP_Ticket;
			}
			set
			{
				if ((this._E_VIP_Ticket != value))
				{
					this.OnE_VIP_TicketChanging(value);
					this.SendPropertyChanging();
					this._E_VIP_Ticket = value;
					this.SendPropertyChanged("E_VIP_Ticket");
					this.OnE_VIP_TicketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_VVIP_Ticket", DbType="Int")]
		public System.Nullable<int> E_VVIP_Ticket
		{
			get
			{
				return this._E_VVIP_Ticket;
			}
			set
			{
				if ((this._E_VVIP_Ticket != value))
				{
					this.OnE_VVIP_TicketChanging(value);
					this.SendPropertyChanging();
					this._E_VVIP_Ticket = value;
					this.SendPropertyChanged("E_VVIP_Ticket");
					this.OnE_VVIP_TicketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> E_StartDate
		{
			get
			{
				return this._E_StartDate;
			}
			set
			{
				if ((this._E_StartDate != value))
				{
					this.OnE_StartDateChanging(value);
					this.SendPropertyChanging();
					this._E_StartDate = value;
					this.SendPropertyChanged("E_StartDate");
					this.OnE_StartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> E_EndDate
		{
			get
			{
				return this._E_EndDate;
			}
			set
			{
				if ((this._E_EndDate != value))
				{
					this.OnE_EndDateChanging(value);
					this.SendPropertyChanging();
					this._E_EndDate = value;
					this.SendPropertyChanged("E_EndDate");
					this.OnE_EndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_NumProduct", DbType="Int")]
		public System.Nullable<int> E_NumProduct
		{
			get
			{
				return this._E_NumProduct;
			}
			set
			{
				if ((this._E_NumProduct != value))
				{
					this.OnE_NumProductChanging(value);
					this.SendPropertyChanging();
					this._E_NumProduct = value;
					this.SendPropertyChanged("E_NumProduct");
					this.OnE_NumProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumViews", DbType="Int")]
		public System.Nullable<int> NumViews
		{
			get
			{
				return this._NumViews;
			}
			set
			{
				if ((this._NumViews != value))
				{
					this.OnNumViewsChanging(value);
					this.SendPropertyChanging();
					this._NumViews = value;
					this.SendPropertyChanged("NumViews");
					this.OnNumViewsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="VarChar(MAX)")]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventStatus", DbType="VarChar(MAX)")]
		public string EventStatus
		{
			get
			{
				return this._EventStatus;
			}
			set
			{
				if ((this._EventStatus != value))
				{
					this.OnEventStatusChanging(value);
					this.SendPropertyChanging();
					this._EventStatus = value;
					this.SendPropertyChanged("EventStatus");
					this.OnEventStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MAIN_EVENT_SURVEY", Storage="_SURVEYs", ThisKey="E_ID", OtherKey="E_ID")]
		public EntitySet<SURVEY> SURVEYs
		{
			get
			{
				return this._SURVEYs;
			}
			set
			{
				this._SURVEYs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MAIN_EVENT_Ticket_Template", Storage="_Ticket_Templates", ThisKey="E_ID", OtherKey="eventid")]
		public EntitySet<Ticket_Template> Ticket_Templates
		{
			get
			{
				return this._Ticket_Templates;
			}
			set
			{
				this._Ticket_Templates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MAIN_EVENT_Staff", Storage="_Staffs", ThisKey="E_ID", OtherKey="eventid")]
		public EntitySet<Staff> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MAIN_EVENT_Product", Storage="_Products", ThisKey="E_ID", OtherKey="eventid")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MAIN_EVENT_EventRSVP", Storage="_EventRSVPs", ThisKey="E_ID", OtherKey="E_ID")]
		public EntitySet<EventRSVP> EventRSVPs
		{
			get
			{
				return this._EventRSVPs;
			}
			set
			{
				this._EventRSVPs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MAIN_EVENT_EventImage", Storage="_EventImages", ThisKey="E_ID", OtherKey="EventID")]
		public EntitySet<EventImage> EventImages
		{
			get
			{
				return this._EventImages;
			}
			set
			{
				this._EventImages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_MAIN_EVENT", Storage="_Address", ThisKey="AD_Id", OtherKey="AD_Id", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.MAIN_EVENTs.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.MAIN_EVENTs.Add(this);
						this._AD_Id = value.AD_Id;
					}
					else
					{
						this._AD_Id = default(int);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventHost_MAIN_EVENT", Storage="_EventHost", ThisKey="EH_ID", OtherKey="EH_ID", IsForeignKey=true)]
		public EventHost EventHost
		{
			get
			{
				return this._EventHost.Entity;
			}
			set
			{
				EventHost previousValue = this._EventHost.Entity;
				if (((previousValue != value) 
							|| (this._EventHost.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventHost.Entity = null;
						previousValue.MAIN_EVENTs.Remove(this);
					}
					this._EventHost.Entity = value;
					if ((value != null))
					{
						value.MAIN_EVENTs.Add(this);
						this._EH_ID = value.EH_ID;
					}
					else
					{
						this._EH_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("EventHost");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SURVEYs(SURVEY entity)
		{
			this.SendPropertyChanging();
			entity.MAIN_EVENT = this;
		}
		
		private void detach_SURVEYs(SURVEY entity)
		{
			this.SendPropertyChanging();
			entity.MAIN_EVENT = null;
		}
		
		private void attach_Ticket_Templates(Ticket_Template entity)
		{
			this.SendPropertyChanging();
			entity.MAIN_EVENT = this;
		}
		
		private void detach_Ticket_Templates(Ticket_Template entity)
		{
			this.SendPropertyChanging();
			entity.MAIN_EVENT = null;
		}
		
		private void attach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.MAIN_EVENT = this;
		}
		
		private void detach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.MAIN_EVENT = null;
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.MAIN_EVENT = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.MAIN_EVENT = null;
		}
		
		private void attach_EventRSVPs(EventRSVP entity)
		{
			this.SendPropertyChanging();
			entity.MAIN_EVENT = this;
		}
		
		private void detach_EventRSVPs(EventRSVP entity)
		{
			this.SendPropertyChanging();
			entity.MAIN_EVENT = null;
		}
		
		private void attach_EventImages(EventImage entity)
		{
			this.SendPropertyChanging();
			entity.MAIN_EVENT = this;
		}
		
		private void detach_EventImages(EventImage entity)
		{
			this.SendPropertyChanging();
			entity.MAIN_EVENT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SURVEY")]
	public partial class SURVEY : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _S_Id;
		
		private int _E_ID;
		
		private EntitySet<SPEAKER> _SPEAKERs;
		
		private EntitySet<SESSION> _SESSIONs;
		
		private EntitySet<RECOMMENDATION> _RECOMMENDATIONs;
		
		private EntitySet<VENDOR> _VENDORs;
		
		private EntitySet<OVERALL_SATISFACTION> _OVERALL_SATISFACTIONs;
		
		private EntitySet<LONG_QUESTION> _LONG_QUESTIONs;
		
		private EntitySet<LOCATION> _LOCATIONs;
		
		private EntitySet<FUTURE_ATTENDANCE> _FUTURE_ATTENDANCEs;
		
		private EntitySet<FOOD> _FOODs;
		
		private EntitySet<FIRST_TIME> _FIRST_TIMEs;
		
		private EntityRef<MAIN_EVENT> _MAIN_EVENT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnS_IdChanging(int value);
    partial void OnS_IdChanged();
    partial void OnE_IDChanging(int value);
    partial void OnE_IDChanged();
    #endregion
		
		public SURVEY()
		{
			this._SPEAKERs = new EntitySet<SPEAKER>(new Action<SPEAKER>(this.attach_SPEAKERs), new Action<SPEAKER>(this.detach_SPEAKERs));
			this._SESSIONs = new EntitySet<SESSION>(new Action<SESSION>(this.attach_SESSIONs), new Action<SESSION>(this.detach_SESSIONs));
			this._RECOMMENDATIONs = new EntitySet<RECOMMENDATION>(new Action<RECOMMENDATION>(this.attach_RECOMMENDATIONs), new Action<RECOMMENDATION>(this.detach_RECOMMENDATIONs));
			this._VENDORs = new EntitySet<VENDOR>(new Action<VENDOR>(this.attach_VENDORs), new Action<VENDOR>(this.detach_VENDORs));
			this._OVERALL_SATISFACTIONs = new EntitySet<OVERALL_SATISFACTION>(new Action<OVERALL_SATISFACTION>(this.attach_OVERALL_SATISFACTIONs), new Action<OVERALL_SATISFACTION>(this.detach_OVERALL_SATISFACTIONs));
			this._LONG_QUESTIONs = new EntitySet<LONG_QUESTION>(new Action<LONG_QUESTION>(this.attach_LONG_QUESTIONs), new Action<LONG_QUESTION>(this.detach_LONG_QUESTIONs));
			this._LOCATIONs = new EntitySet<LOCATION>(new Action<LOCATION>(this.attach_LOCATIONs), new Action<LOCATION>(this.detach_LOCATIONs));
			this._FUTURE_ATTENDANCEs = new EntitySet<FUTURE_ATTENDANCE>(new Action<FUTURE_ATTENDANCE>(this.attach_FUTURE_ATTENDANCEs), new Action<FUTURE_ATTENDANCE>(this.detach_FUTURE_ATTENDANCEs));
			this._FOODs = new EntitySet<FOOD>(new Action<FOOD>(this.attach_FOODs), new Action<FOOD>(this.detach_FOODs));
			this._FIRST_TIMEs = new EntitySet<FIRST_TIME>(new Action<FIRST_TIME>(this.attach_FIRST_TIMEs), new Action<FIRST_TIME>(this.detach_FIRST_TIMEs));
			this._MAIN_EVENT = default(EntityRef<MAIN_EVENT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int S_Id
		{
			get
			{
				return this._S_Id;
			}
			set
			{
				if ((this._S_Id != value))
				{
					this.OnS_IdChanging(value);
					this.SendPropertyChanging();
					this._S_Id = value;
					this.SendPropertyChanged("S_Id");
					this.OnS_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_ID", DbType="Int NOT NULL")]
		public int E_ID
		{
			get
			{
				return this._E_ID;
			}
			set
			{
				if ((this._E_ID != value))
				{
					if (this._MAIN_EVENT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnE_IDChanging(value);
					this.SendPropertyChanging();
					this._E_ID = value;
					this.SendPropertyChanged("E_ID");
					this.OnE_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SURVEY_SPEAKER", Storage="_SPEAKERs", ThisKey="S_Id", OtherKey="S_Id")]
		public EntitySet<SPEAKER> SPEAKERs
		{
			get
			{
				return this._SPEAKERs;
			}
			set
			{
				this._SPEAKERs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SURVEY_SESSION", Storage="_SESSIONs", ThisKey="S_Id", OtherKey="S_Id")]
		public EntitySet<SESSION> SESSIONs
		{
			get
			{
				return this._SESSIONs;
			}
			set
			{
				this._SESSIONs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SURVEY_RECOMMENDATION", Storage="_RECOMMENDATIONs", ThisKey="S_Id", OtherKey="S_Id")]
		public EntitySet<RECOMMENDATION> RECOMMENDATIONs
		{
			get
			{
				return this._RECOMMENDATIONs;
			}
			set
			{
				this._RECOMMENDATIONs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SURVEY_VENDOR", Storage="_VENDORs", ThisKey="S_Id", OtherKey="S_Id")]
		public EntitySet<VENDOR> VENDORs
		{
			get
			{
				return this._VENDORs;
			}
			set
			{
				this._VENDORs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SURVEY_OVERALL_SATISFACTION", Storage="_OVERALL_SATISFACTIONs", ThisKey="S_Id", OtherKey="S_Id")]
		public EntitySet<OVERALL_SATISFACTION> OVERALL_SATISFACTIONs
		{
			get
			{
				return this._OVERALL_SATISFACTIONs;
			}
			set
			{
				this._OVERALL_SATISFACTIONs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SURVEY_LONG_QUESTION", Storage="_LONG_QUESTIONs", ThisKey="S_Id", OtherKey="S_Id")]
		public EntitySet<LONG_QUESTION> LONG_QUESTIONs
		{
			get
			{
				return this._LONG_QUESTIONs;
			}
			set
			{
				this._LONG_QUESTIONs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SURVEY_LOCATION", Storage="_LOCATIONs", ThisKey="S_Id", OtherKey="S_Id")]
		public EntitySet<LOCATION> LOCATIONs
		{
			get
			{
				return this._LOCATIONs;
			}
			set
			{
				this._LOCATIONs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SURVEY_FUTURE_ATTENDANCE", Storage="_FUTURE_ATTENDANCEs", ThisKey="S_Id", OtherKey="S_Id")]
		public EntitySet<FUTURE_ATTENDANCE> FUTURE_ATTENDANCEs
		{
			get
			{
				return this._FUTURE_ATTENDANCEs;
			}
			set
			{
				this._FUTURE_ATTENDANCEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SURVEY_FOOD", Storage="_FOODs", ThisKey="S_Id", OtherKey="S_Id")]
		public EntitySet<FOOD> FOODs
		{
			get
			{
				return this._FOODs;
			}
			set
			{
				this._FOODs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SURVEY_FIRST_TIME", Storage="_FIRST_TIMEs", ThisKey="S_Id", OtherKey="S_Id")]
		public EntitySet<FIRST_TIME> FIRST_TIMEs
		{
			get
			{
				return this._FIRST_TIMEs;
			}
			set
			{
				this._FIRST_TIMEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MAIN_EVENT_SURVEY", Storage="_MAIN_EVENT", ThisKey="E_ID", OtherKey="E_ID", IsForeignKey=true)]
		public MAIN_EVENT MAIN_EVENT
		{
			get
			{
				return this._MAIN_EVENT.Entity;
			}
			set
			{
				MAIN_EVENT previousValue = this._MAIN_EVENT.Entity;
				if (((previousValue != value) 
							|| (this._MAIN_EVENT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MAIN_EVENT.Entity = null;
						previousValue.SURVEYs.Remove(this);
					}
					this._MAIN_EVENT.Entity = value;
					if ((value != null))
					{
						value.SURVEYs.Add(this);
						this._E_ID = value.E_ID;
					}
					else
					{
						this._E_ID = default(int);
					}
					this.SendPropertyChanged("MAIN_EVENT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SPEAKERs(SPEAKER entity)
		{
			this.SendPropertyChanging();
			entity.SURVEY = this;
		}
		
		private void detach_SPEAKERs(SPEAKER entity)
		{
			this.SendPropertyChanging();
			entity.SURVEY = null;
		}
		
		private void attach_SESSIONs(SESSION entity)
		{
			this.SendPropertyChanging();
			entity.SURVEY = this;
		}
		
		private void detach_SESSIONs(SESSION entity)
		{
			this.SendPropertyChanging();
			entity.SURVEY = null;
		}
		
		private void attach_RECOMMENDATIONs(RECOMMENDATION entity)
		{
			this.SendPropertyChanging();
			entity.SURVEY = this;
		}
		
		private void detach_RECOMMENDATIONs(RECOMMENDATION entity)
		{
			this.SendPropertyChanging();
			entity.SURVEY = null;
		}
		
		private void attach_VENDORs(VENDOR entity)
		{
			this.SendPropertyChanging();
			entity.SURVEY = this;
		}
		
		private void detach_VENDORs(VENDOR entity)
		{
			this.SendPropertyChanging();
			entity.SURVEY = null;
		}
		
		private void attach_OVERALL_SATISFACTIONs(OVERALL_SATISFACTION entity)
		{
			this.SendPropertyChanging();
			entity.SURVEY = this;
		}
		
		private void detach_OVERALL_SATISFACTIONs(OVERALL_SATISFACTION entity)
		{
			this.SendPropertyChanging();
			entity.SURVEY = null;
		}
		
		private void attach_LONG_QUESTIONs(LONG_QUESTION entity)
		{
			this.SendPropertyChanging();
			entity.SURVEY = this;
		}
		
		private void detach_LONG_QUESTIONs(LONG_QUESTION entity)
		{
			this.SendPropertyChanging();
			entity.SURVEY = null;
		}
		
		private void attach_LOCATIONs(LOCATION entity)
		{
			this.SendPropertyChanging();
			entity.SURVEY = this;
		}
		
		private void detach_LOCATIONs(LOCATION entity)
		{
			this.SendPropertyChanging();
			entity.SURVEY = null;
		}
		
		private void attach_FUTURE_ATTENDANCEs(FUTURE_ATTENDANCE entity)
		{
			this.SendPropertyChanging();
			entity.SURVEY = this;
		}
		
		private void detach_FUTURE_ATTENDANCEs(FUTURE_ATTENDANCE entity)
		{
			this.SendPropertyChanging();
			entity.SURVEY = null;
		}
		
		private void attach_FOODs(FOOD entity)
		{
			this.SendPropertyChanging();
			entity.SURVEY = this;
		}
		
		private void detach_FOODs(FOOD entity)
		{
			this.SendPropertyChanging();
			entity.SURVEY = null;
		}
		
		private void attach_FIRST_TIMEs(FIRST_TIME entity)
		{
			this.SendPropertyChanging();
			entity.SURVEY = this;
		}
		
		private void detach_FIRST_TIMEs(FIRST_TIME entity)
		{
			this.SendPropertyChanging();
			entity.SURVEY = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ticket_Template")]
	public partial class Ticket_Template : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TicketID;
		
		private string _Type;
		
		private System.Nullable<int> _Credit;
		
		private System.Nullable<decimal> _Price;
		
		private string _RefundPolicy;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<int> _eventid;
		
		private EntitySet<Guest_Ticket> _Guest_Tickets;
		
		private EntityRef<MAIN_EVENT> _MAIN_EVENT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTicketIDChanging(int value);
    partial void OnTicketIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnCreditChanging(System.Nullable<int> value);
    partial void OnCreditChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnRefundPolicyChanging(string value);
    partial void OnRefundPolicyChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OneventidChanging(System.Nullable<int> value);
    partial void OneventidChanged();
    #endregion
		
		public Ticket_Template()
		{
			this._Guest_Tickets = new EntitySet<Guest_Ticket>(new Action<Guest_Ticket>(this.attach_Guest_Tickets), new Action<Guest_Ticket>(this.detach_Guest_Tickets));
			this._MAIN_EVENT = default(EntityRef<MAIN_EVENT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TicketID
		{
			get
			{
				return this._TicketID;
			}
			set
			{
				if ((this._TicketID != value))
				{
					this.OnTicketIDChanging(value);
					this.SendPropertyChanging();
					this._TicketID = value;
					this.SendPropertyChanged("TicketID");
					this.OnTicketIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Credit", DbType="Int")]
		public System.Nullable<int> Credit
		{
			get
			{
				return this._Credit;
			}
			set
			{
				if ((this._Credit != value))
				{
					this.OnCreditChanging(value);
					this.SendPropertyChanging();
					this._Credit = value;
					this.SendPropertyChanged("Credit");
					this.OnCreditChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefundPolicy", DbType="VarChar(50)")]
		public string RefundPolicy
		{
			get
			{
				return this._RefundPolicy;
			}
			set
			{
				if ((this._RefundPolicy != value))
				{
					this.OnRefundPolicyChanging(value);
					this.SendPropertyChanging();
					this._RefundPolicy = value;
					this.SendPropertyChanged("RefundPolicy");
					this.OnRefundPolicyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eventid", DbType="Int")]
		public System.Nullable<int> eventid
		{
			get
			{
				return this._eventid;
			}
			set
			{
				if ((this._eventid != value))
				{
					if (this._MAIN_EVENT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OneventidChanging(value);
					this.SendPropertyChanging();
					this._eventid = value;
					this.SendPropertyChanged("eventid");
					this.OneventidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ticket_Template_Guest_Ticket", Storage="_Guest_Tickets", ThisKey="TicketID", OtherKey="ticket_temp_id")]
		public EntitySet<Guest_Ticket> Guest_Tickets
		{
			get
			{
				return this._Guest_Tickets;
			}
			set
			{
				this._Guest_Tickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MAIN_EVENT_Ticket_Template", Storage="_MAIN_EVENT", ThisKey="eventid", OtherKey="E_ID", IsForeignKey=true)]
		public MAIN_EVENT MAIN_EVENT
		{
			get
			{
				return this._MAIN_EVENT.Entity;
			}
			set
			{
				MAIN_EVENT previousValue = this._MAIN_EVENT.Entity;
				if (((previousValue != value) 
							|| (this._MAIN_EVENT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MAIN_EVENT.Entity = null;
						previousValue.Ticket_Templates.Remove(this);
					}
					this._MAIN_EVENT.Entity = value;
					if ((value != null))
					{
						value.Ticket_Templates.Add(this);
						this._eventid = value.E_ID;
					}
					else
					{
						this._eventid = default(Nullable<int>);
					}
					this.SendPropertyChanged("MAIN_EVENT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Guest_Tickets(Guest_Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Ticket_Template = this;
		}
		
		private void detach_Guest_Tickets(Guest_Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Ticket_Template = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Staff")]
	public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StaffId;
		
		private string _Name;
		
		private string _Occupation;
		
		private string _Email;
		
		private string _Password;
		
		private int _eventid;
		
		private string _WorkStation;
		
		private System.Nullable<int> _NumScans;
		
		private EntityRef<MAIN_EVENT> _MAIN_EVENT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffIdChanging(int value);
    partial void OnStaffIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOccupationChanging(string value);
    partial void OnOccupationChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OneventidChanging(int value);
    partial void OneventidChanged();
    partial void OnWorkStationChanging(string value);
    partial void OnWorkStationChanged();
    partial void OnNumScansChanging(System.Nullable<int> value);
    partial void OnNumScansChanged();
    #endregion
		
		public Staff()
		{
			this._MAIN_EVENT = default(EntityRef<MAIN_EVENT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StaffId
		{
			get
			{
				return this._StaffId;
			}
			set
			{
				if ((this._StaffId != value))
				{
					this.OnStaffIdChanging(value);
					this.SendPropertyChanging();
					this._StaffId = value;
					this.SendPropertyChanged("StaffId");
					this.OnStaffIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Occupation", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Occupation
		{
			get
			{
				return this._Occupation;
			}
			set
			{
				if ((this._Occupation != value))
				{
					this.OnOccupationChanging(value);
					this.SendPropertyChanging();
					this._Occupation = value;
					this.SendPropertyChanged("Occupation");
					this.OnOccupationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eventid", DbType="Int NOT NULL")]
		public int eventid
		{
			get
			{
				return this._eventid;
			}
			set
			{
				if ((this._eventid != value))
				{
					if (this._MAIN_EVENT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OneventidChanging(value);
					this.SendPropertyChanging();
					this._eventid = value;
					this.SendPropertyChanged("eventid");
					this.OneventidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkStation", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string WorkStation
		{
			get
			{
				return this._WorkStation;
			}
			set
			{
				if ((this._WorkStation != value))
				{
					this.OnWorkStationChanging(value);
					this.SendPropertyChanging();
					this._WorkStation = value;
					this.SendPropertyChanged("WorkStation");
					this.OnWorkStationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumScans", DbType="Int")]
		public System.Nullable<int> NumScans
		{
			get
			{
				return this._NumScans;
			}
			set
			{
				if ((this._NumScans != value))
				{
					this.OnNumScansChanging(value);
					this.SendPropertyChanging();
					this._NumScans = value;
					this.SendPropertyChanged("NumScans");
					this.OnNumScansChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MAIN_EVENT_Staff", Storage="_MAIN_EVENT", ThisKey="eventid", OtherKey="E_ID", IsForeignKey=true)]
		public MAIN_EVENT MAIN_EVENT
		{
			get
			{
				return this._MAIN_EVENT.Entity;
			}
			set
			{
				MAIN_EVENT previousValue = this._MAIN_EVENT.Entity;
				if (((previousValue != value) 
							|| (this._MAIN_EVENT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MAIN_EVENT.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._MAIN_EVENT.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._eventid = value.E_ID;
					}
					else
					{
						this._eventid = default(int);
					}
					this.SendPropertyChanged("MAIN_EVENT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SPEAKER")]
	public partial class SPEAKER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Very_Dissatisfied;
		
		private System.Nullable<int> _Dissatisfied;
		
		private System.Nullable<int> _Neutral;
		
		private System.Nullable<int> _Satisfied;
		
		private System.Nullable<int> _Very_Satisfied;
		
		private System.Nullable<int> _S_Id;
		
		private EntityRef<SURVEY> _SURVEY;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnVery_DissatisfiedChanging(System.Nullable<int> value);
    partial void OnVery_DissatisfiedChanged();
    partial void OnDissatisfiedChanging(System.Nullable<int> value);
    partial void OnDissatisfiedChanged();
    partial void OnNeutralChanging(System.Nullable<int> value);
    partial void OnNeutralChanged();
    partial void OnSatisfiedChanging(System.Nullable<int> value);
    partial void OnSatisfiedChanged();
    partial void OnVery_SatisfiedChanging(System.Nullable<int> value);
    partial void OnVery_SatisfiedChanged();
    partial void OnS_IdChanging(System.Nullable<int> value);
    partial void OnS_IdChanged();
    #endregion
		
		public SPEAKER()
		{
			this._SURVEY = default(EntityRef<SURVEY>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Very_Dissatisfied", DbType="Int")]
		public System.Nullable<int> Very_Dissatisfied
		{
			get
			{
				return this._Very_Dissatisfied;
			}
			set
			{
				if ((this._Very_Dissatisfied != value))
				{
					this.OnVery_DissatisfiedChanging(value);
					this.SendPropertyChanging();
					this._Very_Dissatisfied = value;
					this.SendPropertyChanged("Very_Dissatisfied");
					this.OnVery_DissatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dissatisfied", DbType="Int")]
		public System.Nullable<int> Dissatisfied
		{
			get
			{
				return this._Dissatisfied;
			}
			set
			{
				if ((this._Dissatisfied != value))
				{
					this.OnDissatisfiedChanging(value);
					this.SendPropertyChanging();
					this._Dissatisfied = value;
					this.SendPropertyChanged("Dissatisfied");
					this.OnDissatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Neutral", DbType="Int")]
		public System.Nullable<int> Neutral
		{
			get
			{
				return this._Neutral;
			}
			set
			{
				if ((this._Neutral != value))
				{
					this.OnNeutralChanging(value);
					this.SendPropertyChanging();
					this._Neutral = value;
					this.SendPropertyChanged("Neutral");
					this.OnNeutralChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Satisfied", DbType="Int")]
		public System.Nullable<int> Satisfied
		{
			get
			{
				return this._Satisfied;
			}
			set
			{
				if ((this._Satisfied != value))
				{
					this.OnSatisfiedChanging(value);
					this.SendPropertyChanging();
					this._Satisfied = value;
					this.SendPropertyChanged("Satisfied");
					this.OnSatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Very_Satisfied", DbType="Int")]
		public System.Nullable<int> Very_Satisfied
		{
			get
			{
				return this._Very_Satisfied;
			}
			set
			{
				if ((this._Very_Satisfied != value))
				{
					this.OnVery_SatisfiedChanging(value);
					this.SendPropertyChanging();
					this._Very_Satisfied = value;
					this.SendPropertyChanged("Very_Satisfied");
					this.OnVery_SatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_Id", DbType="Int")]
		public System.Nullable<int> S_Id
		{
			get
			{
				return this._S_Id;
			}
			set
			{
				if ((this._S_Id != value))
				{
					if (this._SURVEY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnS_IdChanging(value);
					this.SendPropertyChanging();
					this._S_Id = value;
					this.SendPropertyChanged("S_Id");
					this.OnS_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SURVEY_SPEAKER", Storage="_SURVEY", ThisKey="S_Id", OtherKey="S_Id", IsForeignKey=true)]
		public SURVEY SURVEY
		{
			get
			{
				return this._SURVEY.Entity;
			}
			set
			{
				SURVEY previousValue = this._SURVEY.Entity;
				if (((previousValue != value) 
							|| (this._SURVEY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SURVEY.Entity = null;
						previousValue.SPEAKERs.Remove(this);
					}
					this._SURVEY.Entity = value;
					if ((value != null))
					{
						value.SPEAKERs.Add(this);
						this._S_Id = value.S_Id;
					}
					else
					{
						this._S_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("SURVEY");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SESSION")]
	public partial class SESSION : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Very_Dissatisfied;
		
		private System.Nullable<int> _Dissatisfied;
		
		private System.Nullable<int> _Neutral;
		
		private System.Nullable<int> _Satisfied;
		
		private System.Nullable<int> _Very_Satisfied;
		
		private System.Nullable<int> _S_Id;
		
		private EntityRef<SURVEY> _SURVEY;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnVery_DissatisfiedChanging(System.Nullable<int> value);
    partial void OnVery_DissatisfiedChanged();
    partial void OnDissatisfiedChanging(System.Nullable<int> value);
    partial void OnDissatisfiedChanged();
    partial void OnNeutralChanging(System.Nullable<int> value);
    partial void OnNeutralChanged();
    partial void OnSatisfiedChanging(System.Nullable<int> value);
    partial void OnSatisfiedChanged();
    partial void OnVery_SatisfiedChanging(System.Nullable<int> value);
    partial void OnVery_SatisfiedChanged();
    partial void OnS_IdChanging(System.Nullable<int> value);
    partial void OnS_IdChanged();
    #endregion
		
		public SESSION()
		{
			this._SURVEY = default(EntityRef<SURVEY>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Very_Dissatisfied", DbType="Int")]
		public System.Nullable<int> Very_Dissatisfied
		{
			get
			{
				return this._Very_Dissatisfied;
			}
			set
			{
				if ((this._Very_Dissatisfied != value))
				{
					this.OnVery_DissatisfiedChanging(value);
					this.SendPropertyChanging();
					this._Very_Dissatisfied = value;
					this.SendPropertyChanged("Very_Dissatisfied");
					this.OnVery_DissatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dissatisfied", DbType="Int")]
		public System.Nullable<int> Dissatisfied
		{
			get
			{
				return this._Dissatisfied;
			}
			set
			{
				if ((this._Dissatisfied != value))
				{
					this.OnDissatisfiedChanging(value);
					this.SendPropertyChanging();
					this._Dissatisfied = value;
					this.SendPropertyChanged("Dissatisfied");
					this.OnDissatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Neutral", DbType="Int")]
		public System.Nullable<int> Neutral
		{
			get
			{
				return this._Neutral;
			}
			set
			{
				if ((this._Neutral != value))
				{
					this.OnNeutralChanging(value);
					this.SendPropertyChanging();
					this._Neutral = value;
					this.SendPropertyChanged("Neutral");
					this.OnNeutralChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Satisfied", DbType="Int")]
		public System.Nullable<int> Satisfied
		{
			get
			{
				return this._Satisfied;
			}
			set
			{
				if ((this._Satisfied != value))
				{
					this.OnSatisfiedChanging(value);
					this.SendPropertyChanging();
					this._Satisfied = value;
					this.SendPropertyChanged("Satisfied");
					this.OnSatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Very_Satisfied", DbType="Int")]
		public System.Nullable<int> Very_Satisfied
		{
			get
			{
				return this._Very_Satisfied;
			}
			set
			{
				if ((this._Very_Satisfied != value))
				{
					this.OnVery_SatisfiedChanging(value);
					this.SendPropertyChanging();
					this._Very_Satisfied = value;
					this.SendPropertyChanged("Very_Satisfied");
					this.OnVery_SatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_Id", DbType="Int")]
		public System.Nullable<int> S_Id
		{
			get
			{
				return this._S_Id;
			}
			set
			{
				if ((this._S_Id != value))
				{
					if (this._SURVEY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnS_IdChanging(value);
					this.SendPropertyChanging();
					this._S_Id = value;
					this.SendPropertyChanged("S_Id");
					this.OnS_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SURVEY_SESSION", Storage="_SURVEY", ThisKey="S_Id", OtherKey="S_Id", IsForeignKey=true)]
		public SURVEY SURVEY
		{
			get
			{
				return this._SURVEY.Entity;
			}
			set
			{
				SURVEY previousValue = this._SURVEY.Entity;
				if (((previousValue != value) 
							|| (this._SURVEY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SURVEY.Entity = null;
						previousValue.SESSIONs.Remove(this);
					}
					this._SURVEY.Entity = value;
					if ((value != null))
					{
						value.SESSIONs.Add(this);
						this._S_Id = value.S_Id;
					}
					else
					{
						this._S_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("SURVEY");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RECOMMENDATION")]
	public partial class RECOMMENDATION : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Not_Likely;
		
		private System.Nullable<int> _Neutral;
		
		private System.Nullable<int> _Likey;
		
		private System.Nullable<int> _Very_Likey;
		
		private System.Nullable<int> _S_Id;
		
		private EntityRef<SURVEY> _SURVEY;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNot_LikelyChanging(System.Nullable<int> value);
    partial void OnNot_LikelyChanged();
    partial void OnNeutralChanging(System.Nullable<int> value);
    partial void OnNeutralChanged();
    partial void OnLikeyChanging(System.Nullable<int> value);
    partial void OnLikeyChanged();
    partial void OnVery_LikeyChanging(System.Nullable<int> value);
    partial void OnVery_LikeyChanged();
    partial void OnS_IdChanging(System.Nullable<int> value);
    partial void OnS_IdChanged();
    #endregion
		
		public RECOMMENDATION()
		{
			this._SURVEY = default(EntityRef<SURVEY>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Not_Likely", DbType="Int")]
		public System.Nullable<int> Not_Likely
		{
			get
			{
				return this._Not_Likely;
			}
			set
			{
				if ((this._Not_Likely != value))
				{
					this.OnNot_LikelyChanging(value);
					this.SendPropertyChanging();
					this._Not_Likely = value;
					this.SendPropertyChanged("Not_Likely");
					this.OnNot_LikelyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Neutral", DbType="Int")]
		public System.Nullable<int> Neutral
		{
			get
			{
				return this._Neutral;
			}
			set
			{
				if ((this._Neutral != value))
				{
					this.OnNeutralChanging(value);
					this.SendPropertyChanging();
					this._Neutral = value;
					this.SendPropertyChanged("Neutral");
					this.OnNeutralChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Likey", DbType="Int")]
		public System.Nullable<int> Likey
		{
			get
			{
				return this._Likey;
			}
			set
			{
				if ((this._Likey != value))
				{
					this.OnLikeyChanging(value);
					this.SendPropertyChanging();
					this._Likey = value;
					this.SendPropertyChanged("Likey");
					this.OnLikeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Very_Likey", DbType="Int")]
		public System.Nullable<int> Very_Likey
		{
			get
			{
				return this._Very_Likey;
			}
			set
			{
				if ((this._Very_Likey != value))
				{
					this.OnVery_LikeyChanging(value);
					this.SendPropertyChanging();
					this._Very_Likey = value;
					this.SendPropertyChanged("Very_Likey");
					this.OnVery_LikeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_Id", DbType="Int")]
		public System.Nullable<int> S_Id
		{
			get
			{
				return this._S_Id;
			}
			set
			{
				if ((this._S_Id != value))
				{
					if (this._SURVEY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnS_IdChanging(value);
					this.SendPropertyChanging();
					this._S_Id = value;
					this.SendPropertyChanged("S_Id");
					this.OnS_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SURVEY_RECOMMENDATION", Storage="_SURVEY", ThisKey="S_Id", OtherKey="S_Id", IsForeignKey=true)]
		public SURVEY SURVEY
		{
			get
			{
				return this._SURVEY.Entity;
			}
			set
			{
				SURVEY previousValue = this._SURVEY.Entity;
				if (((previousValue != value) 
							|| (this._SURVEY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SURVEY.Entity = null;
						previousValue.RECOMMENDATIONs.Remove(this);
					}
					this._SURVEY.Entity = value;
					if ((value != null))
					{
						value.RECOMMENDATIONs.Add(this);
						this._S_Id = value.S_Id;
					}
					else
					{
						this._S_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("SURVEY");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VENDOR")]
	public partial class VENDOR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Very_Dissatisfied;
		
		private System.Nullable<int> _Dissatisfied;
		
		private System.Nullable<int> _Neutral;
		
		private System.Nullable<int> _Satisfied;
		
		private System.Nullable<int> _Very_Satisfied;
		
		private System.Nullable<int> _S_Id;
		
		private EntityRef<SURVEY> _SURVEY;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnVery_DissatisfiedChanging(System.Nullable<int> value);
    partial void OnVery_DissatisfiedChanged();
    partial void OnDissatisfiedChanging(System.Nullable<int> value);
    partial void OnDissatisfiedChanged();
    partial void OnNeutralChanging(System.Nullable<int> value);
    partial void OnNeutralChanged();
    partial void OnSatisfiedChanging(System.Nullable<int> value);
    partial void OnSatisfiedChanged();
    partial void OnVery_SatisfiedChanging(System.Nullable<int> value);
    partial void OnVery_SatisfiedChanged();
    partial void OnS_IdChanging(System.Nullable<int> value);
    partial void OnS_IdChanged();
    #endregion
		
		public VENDOR()
		{
			this._SURVEY = default(EntityRef<SURVEY>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Very_Dissatisfied", DbType="Int")]
		public System.Nullable<int> Very_Dissatisfied
		{
			get
			{
				return this._Very_Dissatisfied;
			}
			set
			{
				if ((this._Very_Dissatisfied != value))
				{
					this.OnVery_DissatisfiedChanging(value);
					this.SendPropertyChanging();
					this._Very_Dissatisfied = value;
					this.SendPropertyChanged("Very_Dissatisfied");
					this.OnVery_DissatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dissatisfied", DbType="Int")]
		public System.Nullable<int> Dissatisfied
		{
			get
			{
				return this._Dissatisfied;
			}
			set
			{
				if ((this._Dissatisfied != value))
				{
					this.OnDissatisfiedChanging(value);
					this.SendPropertyChanging();
					this._Dissatisfied = value;
					this.SendPropertyChanged("Dissatisfied");
					this.OnDissatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Neutral", DbType="Int")]
		public System.Nullable<int> Neutral
		{
			get
			{
				return this._Neutral;
			}
			set
			{
				if ((this._Neutral != value))
				{
					this.OnNeutralChanging(value);
					this.SendPropertyChanging();
					this._Neutral = value;
					this.SendPropertyChanged("Neutral");
					this.OnNeutralChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Satisfied", DbType="Int")]
		public System.Nullable<int> Satisfied
		{
			get
			{
				return this._Satisfied;
			}
			set
			{
				if ((this._Satisfied != value))
				{
					this.OnSatisfiedChanging(value);
					this.SendPropertyChanging();
					this._Satisfied = value;
					this.SendPropertyChanged("Satisfied");
					this.OnSatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Very_Satisfied", DbType="Int")]
		public System.Nullable<int> Very_Satisfied
		{
			get
			{
				return this._Very_Satisfied;
			}
			set
			{
				if ((this._Very_Satisfied != value))
				{
					this.OnVery_SatisfiedChanging(value);
					this.SendPropertyChanging();
					this._Very_Satisfied = value;
					this.SendPropertyChanged("Very_Satisfied");
					this.OnVery_SatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_Id", DbType="Int")]
		public System.Nullable<int> S_Id
		{
			get
			{
				return this._S_Id;
			}
			set
			{
				if ((this._S_Id != value))
				{
					if (this._SURVEY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnS_IdChanging(value);
					this.SendPropertyChanging();
					this._S_Id = value;
					this.SendPropertyChanged("S_Id");
					this.OnS_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SURVEY_VENDOR", Storage="_SURVEY", ThisKey="S_Id", OtherKey="S_Id", IsForeignKey=true)]
		public SURVEY SURVEY
		{
			get
			{
				return this._SURVEY.Entity;
			}
			set
			{
				SURVEY previousValue = this._SURVEY.Entity;
				if (((previousValue != value) 
							|| (this._SURVEY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SURVEY.Entity = null;
						previousValue.VENDORs.Remove(this);
					}
					this._SURVEY.Entity = value;
					if ((value != null))
					{
						value.VENDORs.Add(this);
						this._S_Id = value.S_Id;
					}
					else
					{
						this._S_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("SURVEY");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserImage")]
	public partial class UserImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserImageId;
		
		private string _Name;
		
		private System.Nullable<int> _EH_ID;
		
		private EntityRef<EventHost> _EventHost;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserImageIdChanging(int value);
    partial void OnUserImageIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEH_IDChanging(System.Nullable<int> value);
    partial void OnEH_IDChanged();
    #endregion
		
		public UserImage()
		{
			this._EventHost = default(EntityRef<EventHost>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserImageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserImageId
		{
			get
			{
				return this._UserImageId;
			}
			set
			{
				if ((this._UserImageId != value))
				{
					this.OnUserImageIdChanging(value);
					this.SendPropertyChanging();
					this._UserImageId = value;
					this.SendPropertyChanged("UserImageId");
					this.OnUserImageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EH_ID", DbType="Int")]
		public System.Nullable<int> EH_ID
		{
			get
			{
				return this._EH_ID;
			}
			set
			{
				if ((this._EH_ID != value))
				{
					if (this._EventHost.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEH_IDChanging(value);
					this.SendPropertyChanging();
					this._EH_ID = value;
					this.SendPropertyChanged("EH_ID");
					this.OnEH_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventHost_UserImage", Storage="_EventHost", ThisKey="EH_ID", OtherKey="EH_ID", IsForeignKey=true)]
		public EventHost EventHost
		{
			get
			{
				return this._EventHost.Entity;
			}
			set
			{
				EventHost previousValue = this._EventHost.Entity;
				if (((previousValue != value) 
							|| (this._EventHost.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventHost.Entity = null;
						previousValue.UserImages.Remove(this);
					}
					this._EventHost.Entity = value;
					if ((value != null))
					{
						value.UserImages.Add(this);
						this._EH_ID = value.EH_ID;
					}
					else
					{
						this._EH_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("EventHost");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductID;
		
		private string _P_Name;
		
		private string _P_Description;
		
		private System.Nullable<int> _P_Quantity;
		
		private System.Nullable<int> _P_Price;
		
		private System.Nullable<int> _P_Quantity_Remaining;
		
		private System.Nullable<int> _eventid;
		
		private EntityRef<MAIN_EVENT> _MAIN_EVENT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnP_NameChanging(string value);
    partial void OnP_NameChanged();
    partial void OnP_DescriptionChanging(string value);
    partial void OnP_DescriptionChanged();
    partial void OnP_QuantityChanging(System.Nullable<int> value);
    partial void OnP_QuantityChanged();
    partial void OnP_PriceChanging(System.Nullable<int> value);
    partial void OnP_PriceChanged();
    partial void OnP_Quantity_RemainingChanging(System.Nullable<int> value);
    partial void OnP_Quantity_RemainingChanged();
    partial void OneventidChanging(System.Nullable<int> value);
    partial void OneventidChanged();
    #endregion
		
		public Product()
		{
			this._MAIN_EVENT = default(EntityRef<MAIN_EVENT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_Name", DbType="VarChar(50)")]
		public string P_Name
		{
			get
			{
				return this._P_Name;
			}
			set
			{
				if ((this._P_Name != value))
				{
					this.OnP_NameChanging(value);
					this.SendPropertyChanging();
					this._P_Name = value;
					this.SendPropertyChanged("P_Name");
					this.OnP_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_Description", DbType="VarChar(MAX)")]
		public string P_Description
		{
			get
			{
				return this._P_Description;
			}
			set
			{
				if ((this._P_Description != value))
				{
					this.OnP_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._P_Description = value;
					this.SendPropertyChanged("P_Description");
					this.OnP_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_Quantity", DbType="Int")]
		public System.Nullable<int> P_Quantity
		{
			get
			{
				return this._P_Quantity;
			}
			set
			{
				if ((this._P_Quantity != value))
				{
					this.OnP_QuantityChanging(value);
					this.SendPropertyChanging();
					this._P_Quantity = value;
					this.SendPropertyChanged("P_Quantity");
					this.OnP_QuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_Price", DbType="Int")]
		public System.Nullable<int> P_Price
		{
			get
			{
				return this._P_Price;
			}
			set
			{
				if ((this._P_Price != value))
				{
					this.OnP_PriceChanging(value);
					this.SendPropertyChanging();
					this._P_Price = value;
					this.SendPropertyChanged("P_Price");
					this.OnP_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_Quantity_Remaining", DbType="Int")]
		public System.Nullable<int> P_Quantity_Remaining
		{
			get
			{
				return this._P_Quantity_Remaining;
			}
			set
			{
				if ((this._P_Quantity_Remaining != value))
				{
					this.OnP_Quantity_RemainingChanging(value);
					this.SendPropertyChanging();
					this._P_Quantity_Remaining = value;
					this.SendPropertyChanged("P_Quantity_Remaining");
					this.OnP_Quantity_RemainingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eventid", DbType="Int")]
		public System.Nullable<int> eventid
		{
			get
			{
				return this._eventid;
			}
			set
			{
				if ((this._eventid != value))
				{
					if (this._MAIN_EVENT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OneventidChanging(value);
					this.SendPropertyChanging();
					this._eventid = value;
					this.SendPropertyChanged("eventid");
					this.OneventidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MAIN_EVENT_Product", Storage="_MAIN_EVENT", ThisKey="eventid", OtherKey="E_ID", IsForeignKey=true)]
		public MAIN_EVENT MAIN_EVENT
		{
			get
			{
				return this._MAIN_EVENT.Entity;
			}
			set
			{
				MAIN_EVENT previousValue = this._MAIN_EVENT.Entity;
				if (((previousValue != value) 
							|| (this._MAIN_EVENT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MAIN_EVENT.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._MAIN_EVENT.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._eventid = value.E_ID;
					}
					else
					{
						this._eventid = default(Nullable<int>);
					}
					this.SendPropertyChanged("MAIN_EVENT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OVERALL_SATISFACTION")]
	public partial class OVERALL_SATISFACTION : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Very_Dissatisfied;
		
		private System.Nullable<int> _Dissatisfied;
		
		private System.Nullable<int> _Neutral;
		
		private System.Nullable<int> _Satisfied;
		
		private System.Nullable<int> _Very_Satisfied;
		
		private System.Nullable<int> _S_Id;
		
		private EntityRef<SURVEY> _SURVEY;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnVery_DissatisfiedChanging(System.Nullable<int> value);
    partial void OnVery_DissatisfiedChanged();
    partial void OnDissatisfiedChanging(System.Nullable<int> value);
    partial void OnDissatisfiedChanged();
    partial void OnNeutralChanging(System.Nullable<int> value);
    partial void OnNeutralChanged();
    partial void OnSatisfiedChanging(System.Nullable<int> value);
    partial void OnSatisfiedChanged();
    partial void OnVery_SatisfiedChanging(System.Nullable<int> value);
    partial void OnVery_SatisfiedChanged();
    partial void OnS_IdChanging(System.Nullable<int> value);
    partial void OnS_IdChanged();
    #endregion
		
		public OVERALL_SATISFACTION()
		{
			this._SURVEY = default(EntityRef<SURVEY>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Very_Dissatisfied", DbType="Int")]
		public System.Nullable<int> Very_Dissatisfied
		{
			get
			{
				return this._Very_Dissatisfied;
			}
			set
			{
				if ((this._Very_Dissatisfied != value))
				{
					this.OnVery_DissatisfiedChanging(value);
					this.SendPropertyChanging();
					this._Very_Dissatisfied = value;
					this.SendPropertyChanged("Very_Dissatisfied");
					this.OnVery_DissatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dissatisfied", DbType="Int")]
		public System.Nullable<int> Dissatisfied
		{
			get
			{
				return this._Dissatisfied;
			}
			set
			{
				if ((this._Dissatisfied != value))
				{
					this.OnDissatisfiedChanging(value);
					this.SendPropertyChanging();
					this._Dissatisfied = value;
					this.SendPropertyChanged("Dissatisfied");
					this.OnDissatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Neutral", DbType="Int")]
		public System.Nullable<int> Neutral
		{
			get
			{
				return this._Neutral;
			}
			set
			{
				if ((this._Neutral != value))
				{
					this.OnNeutralChanging(value);
					this.SendPropertyChanging();
					this._Neutral = value;
					this.SendPropertyChanged("Neutral");
					this.OnNeutralChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Satisfied", DbType="Int")]
		public System.Nullable<int> Satisfied
		{
			get
			{
				return this._Satisfied;
			}
			set
			{
				if ((this._Satisfied != value))
				{
					this.OnSatisfiedChanging(value);
					this.SendPropertyChanging();
					this._Satisfied = value;
					this.SendPropertyChanged("Satisfied");
					this.OnSatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Very_Satisfied", DbType="Int")]
		public System.Nullable<int> Very_Satisfied
		{
			get
			{
				return this._Very_Satisfied;
			}
			set
			{
				if ((this._Very_Satisfied != value))
				{
					this.OnVery_SatisfiedChanging(value);
					this.SendPropertyChanging();
					this._Very_Satisfied = value;
					this.SendPropertyChanged("Very_Satisfied");
					this.OnVery_SatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_Id", DbType="Int")]
		public System.Nullable<int> S_Id
		{
			get
			{
				return this._S_Id;
			}
			set
			{
				if ((this._S_Id != value))
				{
					if (this._SURVEY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnS_IdChanging(value);
					this.SendPropertyChanging();
					this._S_Id = value;
					this.SendPropertyChanged("S_Id");
					this.OnS_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SURVEY_OVERALL_SATISFACTION", Storage="_SURVEY", ThisKey="S_Id", OtherKey="S_Id", IsForeignKey=true)]
		public SURVEY SURVEY
		{
			get
			{
				return this._SURVEY.Entity;
			}
			set
			{
				SURVEY previousValue = this._SURVEY.Entity;
				if (((previousValue != value) 
							|| (this._SURVEY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SURVEY.Entity = null;
						previousValue.OVERALL_SATISFACTIONs.Remove(this);
					}
					this._SURVEY.Entity = value;
					if ((value != null))
					{
						value.OVERALL_SATISFACTIONs.Add(this);
						this._S_Id = value.S_Id;
					}
					else
					{
						this._S_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("SURVEY");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LONG_QUESTION")]
	public partial class LONG_QUESTION : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _LikedMost;
		
		private string _Improvement;
		
		private string _Other_Suggestion;
		
		private string _LikedLeast;
		
		private System.Nullable<int> _S_Id;
		
		private EntityRef<SURVEY> _SURVEY;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLikedMostChanging(string value);
    partial void OnLikedMostChanged();
    partial void OnImprovementChanging(string value);
    partial void OnImprovementChanged();
    partial void OnOther_SuggestionChanging(string value);
    partial void OnOther_SuggestionChanged();
    partial void OnLikedLeastChanging(string value);
    partial void OnLikedLeastChanged();
    partial void OnS_IdChanging(System.Nullable<int> value);
    partial void OnS_IdChanged();
    #endregion
		
		public LONG_QUESTION()
		{
			this._SURVEY = default(EntityRef<SURVEY>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LikedMost", DbType="VarChar(200)")]
		public string LikedMost
		{
			get
			{
				return this._LikedMost;
			}
			set
			{
				if ((this._LikedMost != value))
				{
					this.OnLikedMostChanging(value);
					this.SendPropertyChanging();
					this._LikedMost = value;
					this.SendPropertyChanged("LikedMost");
					this.OnLikedMostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Improvement", DbType="VarChar(200)")]
		public string Improvement
		{
			get
			{
				return this._Improvement;
			}
			set
			{
				if ((this._Improvement != value))
				{
					this.OnImprovementChanging(value);
					this.SendPropertyChanging();
					this._Improvement = value;
					this.SendPropertyChanged("Improvement");
					this.OnImprovementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Other_Suggestion", DbType="VarChar(200)")]
		public string Other_Suggestion
		{
			get
			{
				return this._Other_Suggestion;
			}
			set
			{
				if ((this._Other_Suggestion != value))
				{
					this.OnOther_SuggestionChanging(value);
					this.SendPropertyChanging();
					this._Other_Suggestion = value;
					this.SendPropertyChanged("Other_Suggestion");
					this.OnOther_SuggestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LikedLeast", DbType="VarChar(200)")]
		public string LikedLeast
		{
			get
			{
				return this._LikedLeast;
			}
			set
			{
				if ((this._LikedLeast != value))
				{
					this.OnLikedLeastChanging(value);
					this.SendPropertyChanging();
					this._LikedLeast = value;
					this.SendPropertyChanged("LikedLeast");
					this.OnLikedLeastChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_Id", DbType="Int")]
		public System.Nullable<int> S_Id
		{
			get
			{
				return this._S_Id;
			}
			set
			{
				if ((this._S_Id != value))
				{
					if (this._SURVEY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnS_IdChanging(value);
					this.SendPropertyChanging();
					this._S_Id = value;
					this.SendPropertyChanged("S_Id");
					this.OnS_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SURVEY_LONG_QUESTION", Storage="_SURVEY", ThisKey="S_Id", OtherKey="S_Id", IsForeignKey=true)]
		public SURVEY SURVEY
		{
			get
			{
				return this._SURVEY.Entity;
			}
			set
			{
				SURVEY previousValue = this._SURVEY.Entity;
				if (((previousValue != value) 
							|| (this._SURVEY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SURVEY.Entity = null;
						previousValue.LONG_QUESTIONs.Remove(this);
					}
					this._SURVEY.Entity = value;
					if ((value != null))
					{
						value.LONG_QUESTIONs.Add(this);
						this._S_Id = value.S_Id;
					}
					else
					{
						this._S_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("SURVEY");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LOCATION")]
	public partial class LOCATION : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Very_Dissatisfied;
		
		private System.Nullable<int> _Dissatisfied;
		
		private System.Nullable<int> _Neutral;
		
		private System.Nullable<int> _Satisfied;
		
		private System.Nullable<int> _Very_Satisfied;
		
		private System.Nullable<int> _S_Id;
		
		private EntityRef<SURVEY> _SURVEY;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnVery_DissatisfiedChanging(System.Nullable<int> value);
    partial void OnVery_DissatisfiedChanged();
    partial void OnDissatisfiedChanging(System.Nullable<int> value);
    partial void OnDissatisfiedChanged();
    partial void OnNeutralChanging(System.Nullable<int> value);
    partial void OnNeutralChanged();
    partial void OnSatisfiedChanging(System.Nullable<int> value);
    partial void OnSatisfiedChanged();
    partial void OnVery_SatisfiedChanging(System.Nullable<int> value);
    partial void OnVery_SatisfiedChanged();
    partial void OnS_IdChanging(System.Nullable<int> value);
    partial void OnS_IdChanged();
    #endregion
		
		public LOCATION()
		{
			this._SURVEY = default(EntityRef<SURVEY>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Very_Dissatisfied", DbType="Int")]
		public System.Nullable<int> Very_Dissatisfied
		{
			get
			{
				return this._Very_Dissatisfied;
			}
			set
			{
				if ((this._Very_Dissatisfied != value))
				{
					this.OnVery_DissatisfiedChanging(value);
					this.SendPropertyChanging();
					this._Very_Dissatisfied = value;
					this.SendPropertyChanged("Very_Dissatisfied");
					this.OnVery_DissatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dissatisfied", DbType="Int")]
		public System.Nullable<int> Dissatisfied
		{
			get
			{
				return this._Dissatisfied;
			}
			set
			{
				if ((this._Dissatisfied != value))
				{
					this.OnDissatisfiedChanging(value);
					this.SendPropertyChanging();
					this._Dissatisfied = value;
					this.SendPropertyChanged("Dissatisfied");
					this.OnDissatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Neutral", DbType="Int")]
		public System.Nullable<int> Neutral
		{
			get
			{
				return this._Neutral;
			}
			set
			{
				if ((this._Neutral != value))
				{
					this.OnNeutralChanging(value);
					this.SendPropertyChanging();
					this._Neutral = value;
					this.SendPropertyChanged("Neutral");
					this.OnNeutralChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Satisfied", DbType="Int")]
		public System.Nullable<int> Satisfied
		{
			get
			{
				return this._Satisfied;
			}
			set
			{
				if ((this._Satisfied != value))
				{
					this.OnSatisfiedChanging(value);
					this.SendPropertyChanging();
					this._Satisfied = value;
					this.SendPropertyChanged("Satisfied");
					this.OnSatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Very_Satisfied", DbType="Int")]
		public System.Nullable<int> Very_Satisfied
		{
			get
			{
				return this._Very_Satisfied;
			}
			set
			{
				if ((this._Very_Satisfied != value))
				{
					this.OnVery_SatisfiedChanging(value);
					this.SendPropertyChanging();
					this._Very_Satisfied = value;
					this.SendPropertyChanged("Very_Satisfied");
					this.OnVery_SatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_Id", DbType="Int")]
		public System.Nullable<int> S_Id
		{
			get
			{
				return this._S_Id;
			}
			set
			{
				if ((this._S_Id != value))
				{
					if (this._SURVEY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnS_IdChanging(value);
					this.SendPropertyChanging();
					this._S_Id = value;
					this.SendPropertyChanged("S_Id");
					this.OnS_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SURVEY_LOCATION", Storage="_SURVEY", ThisKey="S_Id", OtherKey="S_Id", IsForeignKey=true)]
		public SURVEY SURVEY
		{
			get
			{
				return this._SURVEY.Entity;
			}
			set
			{
				SURVEY previousValue = this._SURVEY.Entity;
				if (((previousValue != value) 
							|| (this._SURVEY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SURVEY.Entity = null;
						previousValue.LOCATIONs.Remove(this);
					}
					this._SURVEY.Entity = value;
					if ((value != null))
					{
						value.LOCATIONs.Add(this);
						this._S_Id = value.S_Id;
					}
					else
					{
						this._S_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("SURVEY");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Guest_Ticket")]
	public partial class Guest_Ticket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ticket_Id;
		
		private int _G_ID;
		
		private int _ticket_temp_id;
		
		private int _numTicket;
		
		private EntitySet<Guest_QRCode> _Guest_QRCodes;
		
		private EntityRef<Ticket_Template> _Ticket_Template;
		
		private EntityRef<Guest> _Guest;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onticket_IdChanging(int value);
    partial void Onticket_IdChanged();
    partial void OnG_IDChanging(int value);
    partial void OnG_IDChanged();
    partial void Onticket_temp_idChanging(int value);
    partial void Onticket_temp_idChanged();
    partial void OnnumTicketChanging(int value);
    partial void OnnumTicketChanged();
    #endregion
		
		public Guest_Ticket()
		{
			this._Guest_QRCodes = new EntitySet<Guest_QRCode>(new Action<Guest_QRCode>(this.attach_Guest_QRCodes), new Action<Guest_QRCode>(this.detach_Guest_QRCodes));
			this._Ticket_Template = default(EntityRef<Ticket_Template>);
			this._Guest = default(EntityRef<Guest>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ticket_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ticket_Id
		{
			get
			{
				return this._ticket_Id;
			}
			set
			{
				if ((this._ticket_Id != value))
				{
					this.Onticket_IdChanging(value);
					this.SendPropertyChanging();
					this._ticket_Id = value;
					this.SendPropertyChanged("ticket_Id");
					this.Onticket_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_G_ID", DbType="Int NOT NULL")]
		public int G_ID
		{
			get
			{
				return this._G_ID;
			}
			set
			{
				if ((this._G_ID != value))
				{
					if (this._Guest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnG_IDChanging(value);
					this.SendPropertyChanging();
					this._G_ID = value;
					this.SendPropertyChanged("G_ID");
					this.OnG_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ticket_temp_id", DbType="Int NOT NULL")]
		public int ticket_temp_id
		{
			get
			{
				return this._ticket_temp_id;
			}
			set
			{
				if ((this._ticket_temp_id != value))
				{
					if (this._Ticket_Template.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onticket_temp_idChanging(value);
					this.SendPropertyChanging();
					this._ticket_temp_id = value;
					this.SendPropertyChanged("ticket_temp_id");
					this.Onticket_temp_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numTicket", DbType="Int NOT NULL")]
		public int numTicket
		{
			get
			{
				return this._numTicket;
			}
			set
			{
				if ((this._numTicket != value))
				{
					this.OnnumTicketChanging(value);
					this.SendPropertyChanging();
					this._numTicket = value;
					this.SendPropertyChanged("numTicket");
					this.OnnumTicketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Guest_Ticket_Guest_QRCode", Storage="_Guest_QRCodes", ThisKey="ticket_Id", OtherKey="ticket_Id")]
		public EntitySet<Guest_QRCode> Guest_QRCodes
		{
			get
			{
				return this._Guest_QRCodes;
			}
			set
			{
				this._Guest_QRCodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ticket_Template_Guest_Ticket", Storage="_Ticket_Template", ThisKey="ticket_temp_id", OtherKey="TicketID", IsForeignKey=true)]
		public Ticket_Template Ticket_Template
		{
			get
			{
				return this._Ticket_Template.Entity;
			}
			set
			{
				Ticket_Template previousValue = this._Ticket_Template.Entity;
				if (((previousValue != value) 
							|| (this._Ticket_Template.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ticket_Template.Entity = null;
						previousValue.Guest_Tickets.Remove(this);
					}
					this._Ticket_Template.Entity = value;
					if ((value != null))
					{
						value.Guest_Tickets.Add(this);
						this._ticket_temp_id = value.TicketID;
					}
					else
					{
						this._ticket_temp_id = default(int);
					}
					this.SendPropertyChanged("Ticket_Template");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Guest_Guest_Ticket", Storage="_Guest", ThisKey="G_ID", OtherKey="G_ID", IsForeignKey=true)]
		public Guest Guest
		{
			get
			{
				return this._Guest.Entity;
			}
			set
			{
				Guest previousValue = this._Guest.Entity;
				if (((previousValue != value) 
							|| (this._Guest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Guest.Entity = null;
						previousValue.Guest_Tickets.Remove(this);
					}
					this._Guest.Entity = value;
					if ((value != null))
					{
						value.Guest_Tickets.Add(this);
						this._G_ID = value.G_ID;
					}
					else
					{
						this._G_ID = default(int);
					}
					this.SendPropertyChanged("Guest");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Guest_QRCodes(Guest_QRCode entity)
		{
			this.SendPropertyChanging();
			entity.Guest_Ticket = this;
		}
		
		private void detach_Guest_QRCodes(Guest_QRCode entity)
		{
			this.SendPropertyChanging();
			entity.Guest_Ticket = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Guest_QRCode")]
	public partial class Guest_QRCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QR_Id;
		
		private string _Name;
		
		private System.Nullable<int> _ticket_Id;
		
		private string _Location;
		
		private System.Nullable<int> _Checked_In;
		
		private System.Nullable<System.DateTime> _EntranceTime;
		
		private System.Nullable<int> _Credit;
		
		private EntityRef<Guest_Ticket> _Guest_Ticket;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQR_IdChanging(int value);
    partial void OnQR_IdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void Onticket_IdChanging(System.Nullable<int> value);
    partial void Onticket_IdChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnChecked_InChanging(System.Nullable<int> value);
    partial void OnChecked_InChanged();
    partial void OnEntranceTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEntranceTimeChanged();
    partial void OnCreditChanging(System.Nullable<int> value);
    partial void OnCreditChanged();
    #endregion
		
		public Guest_QRCode()
		{
			this._Guest_Ticket = default(EntityRef<Guest_Ticket>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QR_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QR_Id
		{
			get
			{
				return this._QR_Id;
			}
			set
			{
				if ((this._QR_Id != value))
				{
					this.OnQR_IdChanging(value);
					this.SendPropertyChanging();
					this._QR_Id = value;
					this.SendPropertyChanged("QR_Id");
					this.OnQR_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ticket_Id", DbType="Int")]
		public System.Nullable<int> ticket_Id
		{
			get
			{
				return this._ticket_Id;
			}
			set
			{
				if ((this._ticket_Id != value))
				{
					if (this._Guest_Ticket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onticket_IdChanging(value);
					this.SendPropertyChanging();
					this._ticket_Id = value;
					this.SendPropertyChanged("ticket_Id");
					this.Onticket_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="VarChar(MAX)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Checked_In", DbType="Int")]
		public System.Nullable<int> Checked_In
		{
			get
			{
				return this._Checked_In;
			}
			set
			{
				if ((this._Checked_In != value))
				{
					this.OnChecked_InChanging(value);
					this.SendPropertyChanging();
					this._Checked_In = value;
					this.SendPropertyChanged("Checked_In");
					this.OnChecked_InChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntranceTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EntranceTime
		{
			get
			{
				return this._EntranceTime;
			}
			set
			{
				if ((this._EntranceTime != value))
				{
					this.OnEntranceTimeChanging(value);
					this.SendPropertyChanging();
					this._EntranceTime = value;
					this.SendPropertyChanged("EntranceTime");
					this.OnEntranceTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Credit", DbType="Int")]
		public System.Nullable<int> Credit
		{
			get
			{
				return this._Credit;
			}
			set
			{
				if ((this._Credit != value))
				{
					this.OnCreditChanging(value);
					this.SendPropertyChanging();
					this._Credit = value;
					this.SendPropertyChanged("Credit");
					this.OnCreditChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Guest_Ticket_Guest_QRCode", Storage="_Guest_Ticket", ThisKey="ticket_Id", OtherKey="ticket_Id", IsForeignKey=true)]
		public Guest_Ticket Guest_Ticket
		{
			get
			{
				return this._Guest_Ticket.Entity;
			}
			set
			{
				Guest_Ticket previousValue = this._Guest_Ticket.Entity;
				if (((previousValue != value) 
							|| (this._Guest_Ticket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Guest_Ticket.Entity = null;
						previousValue.Guest_QRCodes.Remove(this);
					}
					this._Guest_Ticket.Entity = value;
					if ((value != null))
					{
						value.Guest_QRCodes.Add(this);
						this._ticket_Id = value.ticket_Id;
					}
					else
					{
						this._ticket_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Guest_Ticket");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FUTURE_ATTENDANCE")]
	public partial class FUTURE_ATTENDANCE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Not_Likely;
		
		private System.Nullable<int> _Neutral;
		
		private System.Nullable<int> _Likey;
		
		private System.Nullable<int> _Very_Likey;
		
		private System.Nullable<int> _S_Id;
		
		private EntityRef<SURVEY> _SURVEY;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNot_LikelyChanging(System.Nullable<int> value);
    partial void OnNot_LikelyChanged();
    partial void OnNeutralChanging(System.Nullable<int> value);
    partial void OnNeutralChanged();
    partial void OnLikeyChanging(System.Nullable<int> value);
    partial void OnLikeyChanged();
    partial void OnVery_LikeyChanging(System.Nullable<int> value);
    partial void OnVery_LikeyChanged();
    partial void OnS_IdChanging(System.Nullable<int> value);
    partial void OnS_IdChanged();
    #endregion
		
		public FUTURE_ATTENDANCE()
		{
			this._SURVEY = default(EntityRef<SURVEY>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Not_Likely", DbType="Int")]
		public System.Nullable<int> Not_Likely
		{
			get
			{
				return this._Not_Likely;
			}
			set
			{
				if ((this._Not_Likely != value))
				{
					this.OnNot_LikelyChanging(value);
					this.SendPropertyChanging();
					this._Not_Likely = value;
					this.SendPropertyChanged("Not_Likely");
					this.OnNot_LikelyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Neutral", DbType="Int")]
		public System.Nullable<int> Neutral
		{
			get
			{
				return this._Neutral;
			}
			set
			{
				if ((this._Neutral != value))
				{
					this.OnNeutralChanging(value);
					this.SendPropertyChanging();
					this._Neutral = value;
					this.SendPropertyChanged("Neutral");
					this.OnNeutralChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Likey", DbType="Int")]
		public System.Nullable<int> Likey
		{
			get
			{
				return this._Likey;
			}
			set
			{
				if ((this._Likey != value))
				{
					this.OnLikeyChanging(value);
					this.SendPropertyChanging();
					this._Likey = value;
					this.SendPropertyChanged("Likey");
					this.OnLikeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Very_Likey", DbType="Int")]
		public System.Nullable<int> Very_Likey
		{
			get
			{
				return this._Very_Likey;
			}
			set
			{
				if ((this._Very_Likey != value))
				{
					this.OnVery_LikeyChanging(value);
					this.SendPropertyChanging();
					this._Very_Likey = value;
					this.SendPropertyChanged("Very_Likey");
					this.OnVery_LikeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_Id", DbType="Int")]
		public System.Nullable<int> S_Id
		{
			get
			{
				return this._S_Id;
			}
			set
			{
				if ((this._S_Id != value))
				{
					if (this._SURVEY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnS_IdChanging(value);
					this.SendPropertyChanging();
					this._S_Id = value;
					this.SendPropertyChanged("S_Id");
					this.OnS_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SURVEY_FUTURE_ATTENDANCE", Storage="_SURVEY", ThisKey="S_Id", OtherKey="S_Id", IsForeignKey=true)]
		public SURVEY SURVEY
		{
			get
			{
				return this._SURVEY.Entity;
			}
			set
			{
				SURVEY previousValue = this._SURVEY.Entity;
				if (((previousValue != value) 
							|| (this._SURVEY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SURVEY.Entity = null;
						previousValue.FUTURE_ATTENDANCEs.Remove(this);
					}
					this._SURVEY.Entity = value;
					if ((value != null))
					{
						value.FUTURE_ATTENDANCEs.Add(this);
						this._S_Id = value.S_Id;
					}
					else
					{
						this._S_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("SURVEY");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FOOD")]
	public partial class FOOD : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Very_Dissatisfied;
		
		private System.Nullable<int> _Dissatisfied;
		
		private System.Nullable<int> _Neutral;
		
		private System.Nullable<int> _Satisfied;
		
		private System.Nullable<int> _Very_Satisfied;
		
		private System.Nullable<int> _S_Id;
		
		private EntityRef<SURVEY> _SURVEY;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnVery_DissatisfiedChanging(System.Nullable<int> value);
    partial void OnVery_DissatisfiedChanged();
    partial void OnDissatisfiedChanging(System.Nullable<int> value);
    partial void OnDissatisfiedChanged();
    partial void OnNeutralChanging(System.Nullable<int> value);
    partial void OnNeutralChanged();
    partial void OnSatisfiedChanging(System.Nullable<int> value);
    partial void OnSatisfiedChanged();
    partial void OnVery_SatisfiedChanging(System.Nullable<int> value);
    partial void OnVery_SatisfiedChanged();
    partial void OnS_IdChanging(System.Nullable<int> value);
    partial void OnS_IdChanged();
    #endregion
		
		public FOOD()
		{
			this._SURVEY = default(EntityRef<SURVEY>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Very_Dissatisfied", DbType="Int")]
		public System.Nullable<int> Very_Dissatisfied
		{
			get
			{
				return this._Very_Dissatisfied;
			}
			set
			{
				if ((this._Very_Dissatisfied != value))
				{
					this.OnVery_DissatisfiedChanging(value);
					this.SendPropertyChanging();
					this._Very_Dissatisfied = value;
					this.SendPropertyChanged("Very_Dissatisfied");
					this.OnVery_DissatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dissatisfied", DbType="Int")]
		public System.Nullable<int> Dissatisfied
		{
			get
			{
				return this._Dissatisfied;
			}
			set
			{
				if ((this._Dissatisfied != value))
				{
					this.OnDissatisfiedChanging(value);
					this.SendPropertyChanging();
					this._Dissatisfied = value;
					this.SendPropertyChanged("Dissatisfied");
					this.OnDissatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Neutral", DbType="Int")]
		public System.Nullable<int> Neutral
		{
			get
			{
				return this._Neutral;
			}
			set
			{
				if ((this._Neutral != value))
				{
					this.OnNeutralChanging(value);
					this.SendPropertyChanging();
					this._Neutral = value;
					this.SendPropertyChanged("Neutral");
					this.OnNeutralChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Satisfied", DbType="Int")]
		public System.Nullable<int> Satisfied
		{
			get
			{
				return this._Satisfied;
			}
			set
			{
				if ((this._Satisfied != value))
				{
					this.OnSatisfiedChanging(value);
					this.SendPropertyChanging();
					this._Satisfied = value;
					this.SendPropertyChanged("Satisfied");
					this.OnSatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Very_Satisfied", DbType="Int")]
		public System.Nullable<int> Very_Satisfied
		{
			get
			{
				return this._Very_Satisfied;
			}
			set
			{
				if ((this._Very_Satisfied != value))
				{
					this.OnVery_SatisfiedChanging(value);
					this.SendPropertyChanging();
					this._Very_Satisfied = value;
					this.SendPropertyChanged("Very_Satisfied");
					this.OnVery_SatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_Id", DbType="Int")]
		public System.Nullable<int> S_Id
		{
			get
			{
				return this._S_Id;
			}
			set
			{
				if ((this._S_Id != value))
				{
					if (this._SURVEY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnS_IdChanging(value);
					this.SendPropertyChanging();
					this._S_Id = value;
					this.SendPropertyChanged("S_Id");
					this.OnS_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SURVEY_FOOD", Storage="_SURVEY", ThisKey="S_Id", OtherKey="S_Id", IsForeignKey=true)]
		public SURVEY SURVEY
		{
			get
			{
				return this._SURVEY.Entity;
			}
			set
			{
				SURVEY previousValue = this._SURVEY.Entity;
				if (((previousValue != value) 
							|| (this._SURVEY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SURVEY.Entity = null;
						previousValue.FOODs.Remove(this);
					}
					this._SURVEY.Entity = value;
					if ((value != null))
					{
						value.FOODs.Add(this);
						this._S_Id = value.S_Id;
					}
					else
					{
						this._S_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("SURVEY");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FIRST_TIME")]
	public partial class FIRST_TIME : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Yes;
		
		private System.Nullable<int> _No;
		
		private System.Nullable<int> _S_Id;
		
		private EntityRef<SURVEY> _SURVEY;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnYesChanging(System.Nullable<int> value);
    partial void OnYesChanged();
    partial void OnNoChanging(System.Nullable<int> value);
    partial void OnNoChanged();
    partial void OnS_IdChanging(System.Nullable<int> value);
    partial void OnS_IdChanged();
    #endregion
		
		public FIRST_TIME()
		{
			this._SURVEY = default(EntityRef<SURVEY>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Yes", DbType="Int")]
		public System.Nullable<int> Yes
		{
			get
			{
				return this._Yes;
			}
			set
			{
				if ((this._Yes != value))
				{
					this.OnYesChanging(value);
					this.SendPropertyChanging();
					this._Yes = value;
					this.SendPropertyChanged("Yes");
					this.OnYesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_No", DbType="Int")]
		public System.Nullable<int> No
		{
			get
			{
				return this._No;
			}
			set
			{
				if ((this._No != value))
				{
					this.OnNoChanging(value);
					this.SendPropertyChanging();
					this._No = value;
					this.SendPropertyChanged("No");
					this.OnNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_Id", DbType="Int")]
		public System.Nullable<int> S_Id
		{
			get
			{
				return this._S_Id;
			}
			set
			{
				if ((this._S_Id != value))
				{
					if (this._SURVEY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnS_IdChanging(value);
					this.SendPropertyChanging();
					this._S_Id = value;
					this.SendPropertyChanged("S_Id");
					this.OnS_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SURVEY_FIRST_TIME", Storage="_SURVEY", ThisKey="S_Id", OtherKey="S_Id", IsForeignKey=true)]
		public SURVEY SURVEY
		{
			get
			{
				return this._SURVEY.Entity;
			}
			set
			{
				SURVEY previousValue = this._SURVEY.Entity;
				if (((previousValue != value) 
							|| (this._SURVEY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SURVEY.Entity = null;
						previousValue.FIRST_TIMEs.Remove(this);
					}
					this._SURVEY.Entity = value;
					if ((value != null))
					{
						value.FIRST_TIMEs.Add(this);
						this._S_Id = value.S_Id;
					}
					else
					{
						this._S_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("SURVEY");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventRSVP")]
	public partial class EventRSVP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RSVP_Id;
		
		private string _Status;
		
		private System.Nullable<int> _G_ID;
		
		private System.Nullable<int> _E_ID;
		
		private EntityRef<MAIN_EVENT> _MAIN_EVENT;
		
		private EntityRef<Guest> _Guest;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRSVP_IdChanging(int value);
    partial void OnRSVP_IdChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnG_IDChanging(System.Nullable<int> value);
    partial void OnG_IDChanged();
    partial void OnE_IDChanging(System.Nullable<int> value);
    partial void OnE_IDChanged();
    #endregion
		
		public EventRSVP()
		{
			this._MAIN_EVENT = default(EntityRef<MAIN_EVENT>);
			this._Guest = default(EntityRef<Guest>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RSVP_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RSVP_Id
		{
			get
			{
				return this._RSVP_Id;
			}
			set
			{
				if ((this._RSVP_Id != value))
				{
					this.OnRSVP_IdChanging(value);
					this.SendPropertyChanging();
					this._RSVP_Id = value;
					this.SendPropertyChanged("RSVP_Id");
					this.OnRSVP_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_G_ID", DbType="Int")]
		public System.Nullable<int> G_ID
		{
			get
			{
				return this._G_ID;
			}
			set
			{
				if ((this._G_ID != value))
				{
					if (this._Guest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnG_IDChanging(value);
					this.SendPropertyChanging();
					this._G_ID = value;
					this.SendPropertyChanged("G_ID");
					this.OnG_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_ID", DbType="Int")]
		public System.Nullable<int> E_ID
		{
			get
			{
				return this._E_ID;
			}
			set
			{
				if ((this._E_ID != value))
				{
					if (this._MAIN_EVENT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnE_IDChanging(value);
					this.SendPropertyChanging();
					this._E_ID = value;
					this.SendPropertyChanged("E_ID");
					this.OnE_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MAIN_EVENT_EventRSVP", Storage="_MAIN_EVENT", ThisKey="E_ID", OtherKey="E_ID", IsForeignKey=true)]
		public MAIN_EVENT MAIN_EVENT
		{
			get
			{
				return this._MAIN_EVENT.Entity;
			}
			set
			{
				MAIN_EVENT previousValue = this._MAIN_EVENT.Entity;
				if (((previousValue != value) 
							|| (this._MAIN_EVENT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MAIN_EVENT.Entity = null;
						previousValue.EventRSVPs.Remove(this);
					}
					this._MAIN_EVENT.Entity = value;
					if ((value != null))
					{
						value.EventRSVPs.Add(this);
						this._E_ID = value.E_ID;
					}
					else
					{
						this._E_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MAIN_EVENT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Guest_EventRSVP", Storage="_Guest", ThisKey="G_ID", OtherKey="G_ID", IsForeignKey=true)]
		public Guest Guest
		{
			get
			{
				return this._Guest.Entity;
			}
			set
			{
				Guest previousValue = this._Guest.Entity;
				if (((previousValue != value) 
							|| (this._Guest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Guest.Entity = null;
						previousValue.EventRSVPs.Remove(this);
					}
					this._Guest.Entity = value;
					if ((value != null))
					{
						value.EventRSVPs.Add(this);
						this._G_ID = value.G_ID;
					}
					else
					{
						this._G_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Guest");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventImage")]
	public partial class EventImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventImageId;
		
		private string _Name;
		
		private System.Nullable<int> _EventID;
		
		private System.Data.Linq.Binary _StreamData;
		
		private string _ContentType;
		
		private System.Data.Linq.Binary _Data;
		
		private string _Location;
		
		private string _DateUploaded;
		
		private System.Nullable<int> _Size;
		
		private EntityRef<MAIN_EVENT> _MAIN_EVENT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventImageIdChanging(int value);
    partial void OnEventImageIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEventIDChanging(System.Nullable<int> value);
    partial void OnEventIDChanged();
    partial void OnStreamDataChanging(System.Data.Linq.Binary value);
    partial void OnStreamDataChanged();
    partial void OnContentTypeChanging(string value);
    partial void OnContentTypeChanged();
    partial void OnDataChanging(System.Data.Linq.Binary value);
    partial void OnDataChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnDateUploadedChanging(string value);
    partial void OnDateUploadedChanged();
    partial void OnSizeChanging(System.Nullable<int> value);
    partial void OnSizeChanged();
    #endregion
		
		public EventImage()
		{
			this._MAIN_EVENT = default(EntityRef<MAIN_EVENT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventImageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventImageId
		{
			get
			{
				return this._EventImageId;
			}
			set
			{
				if ((this._EventImageId != value))
				{
					this.OnEventImageIdChanging(value);
					this.SendPropertyChanging();
					this._EventImageId = value;
					this.SendPropertyChanged("EventImageId");
					this.OnEventImageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int")]
		public System.Nullable<int> EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._MAIN_EVENT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreamData", DbType="Binary(1)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary StreamData
		{
			get
			{
				return this._StreamData;
			}
			set
			{
				if ((this._StreamData != value))
				{
					this.OnStreamDataChanging(value);
					this.SendPropertyChanging();
					this._StreamData = value;
					this.SendPropertyChanged("StreamData");
					this.OnStreamDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentType", DbType="VarChar(MAX)")]
		public string ContentType
		{
			get
			{
				return this._ContentType;
			}
			set
			{
				if ((this._ContentType != value))
				{
					this.OnContentTypeChanging(value);
					this.SendPropertyChanging();
					this._ContentType = value;
					this.SendPropertyChanged("ContentType");
					this.OnContentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="Binary(1)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="VarChar(MAX)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUploaded", DbType="VarChar(MAX)")]
		public string DateUploaded
		{
			get
			{
				return this._DateUploaded;
			}
			set
			{
				if ((this._DateUploaded != value))
				{
					this.OnDateUploadedChanging(value);
					this.SendPropertyChanging();
					this._DateUploaded = value;
					this.SendPropertyChanged("DateUploaded");
					this.OnDateUploadedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="Int")]
		public System.Nullable<int> Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MAIN_EVENT_EventImage", Storage="_MAIN_EVENT", ThisKey="EventID", OtherKey="E_ID", IsForeignKey=true)]
		public MAIN_EVENT MAIN_EVENT
		{
			get
			{
				return this._MAIN_EVENT.Entity;
			}
			set
			{
				MAIN_EVENT previousValue = this._MAIN_EVENT.Entity;
				if (((previousValue != value) 
							|| (this._MAIN_EVENT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MAIN_EVENT.Entity = null;
						previousValue.EventImages.Remove(this);
					}
					this._MAIN_EVENT.Entity = value;
					if ((value != null))
					{
						value.EventImages.Add(this);
						this._EventID = value.E_ID;
					}
					else
					{
						this._EventID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MAIN_EVENT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GuestImage")]
	public partial class GuestImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GuestImageId;
		
		private string _Name;
		
		private System.Nullable<int> _G_ID;
		
		private System.Data.Linq.Binary _StreamData;
		
		private string _ContentType;
		
		private System.Data.Linq.Binary _Data;
		
		private string _Location;
		
		private string _DateUploaded;
		
		private System.Nullable<int> _Size;
		
		private EntityRef<Guest> _Guest;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGuestImageIdChanging(int value);
    partial void OnGuestImageIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnG_IDChanging(System.Nullable<int> value);
    partial void OnG_IDChanged();
    partial void OnStreamDataChanging(System.Data.Linq.Binary value);
    partial void OnStreamDataChanged();
    partial void OnContentTypeChanging(string value);
    partial void OnContentTypeChanged();
    partial void OnDataChanging(System.Data.Linq.Binary value);
    partial void OnDataChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnDateUploadedChanging(string value);
    partial void OnDateUploadedChanged();
    partial void OnSizeChanging(System.Nullable<int> value);
    partial void OnSizeChanged();
    #endregion
		
		public GuestImage()
		{
			this._Guest = default(EntityRef<Guest>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GuestImageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GuestImageId
		{
			get
			{
				return this._GuestImageId;
			}
			set
			{
				if ((this._GuestImageId != value))
				{
					this.OnGuestImageIdChanging(value);
					this.SendPropertyChanging();
					this._GuestImageId = value;
					this.SendPropertyChanged("GuestImageId");
					this.OnGuestImageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_G_ID", DbType="Int")]
		public System.Nullable<int> G_ID
		{
			get
			{
				return this._G_ID;
			}
			set
			{
				if ((this._G_ID != value))
				{
					if (this._Guest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnG_IDChanging(value);
					this.SendPropertyChanging();
					this._G_ID = value;
					this.SendPropertyChanged("G_ID");
					this.OnG_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreamData", DbType="Binary(1)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary StreamData
		{
			get
			{
				return this._StreamData;
			}
			set
			{
				if ((this._StreamData != value))
				{
					this.OnStreamDataChanging(value);
					this.SendPropertyChanging();
					this._StreamData = value;
					this.SendPropertyChanged("StreamData");
					this.OnStreamDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentType", DbType="VarChar(MAX)")]
		public string ContentType
		{
			get
			{
				return this._ContentType;
			}
			set
			{
				if ((this._ContentType != value))
				{
					this.OnContentTypeChanging(value);
					this.SendPropertyChanging();
					this._ContentType = value;
					this.SendPropertyChanged("ContentType");
					this.OnContentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="Binary(1)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="VarChar(MAX)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUploaded", DbType="VarChar(MAX)")]
		public string DateUploaded
		{
			get
			{
				return this._DateUploaded;
			}
			set
			{
				if ((this._DateUploaded != value))
				{
					this.OnDateUploadedChanging(value);
					this.SendPropertyChanging();
					this._DateUploaded = value;
					this.SendPropertyChanged("DateUploaded");
					this.OnDateUploadedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="Int")]
		public System.Nullable<int> Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Guest_GuestImage", Storage="_Guest", ThisKey="G_ID", OtherKey="G_ID", IsForeignKey=true)]
		public Guest Guest
		{
			get
			{
				return this._Guest.Entity;
			}
			set
			{
				Guest previousValue = this._Guest.Entity;
				if (((previousValue != value) 
							|| (this._Guest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Guest.Entity = null;
						previousValue.GuestImages.Remove(this);
					}
					this._Guest.Entity = value;
					if ((value != null))
					{
						value.GuestImages.Add(this);
						this._G_ID = value.G_ID;
					}
					else
					{
						this._G_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Guest");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
